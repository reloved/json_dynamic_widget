// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'json_animated_default_text_style_builder.dart';

// **************************************************************************
// Generator: JsonWidgetLibraryBuilder
// **************************************************************************

// ignore_for_file: avoid_init_to_null
// ignore_for_file: deprecated_member_use

// ignore_for_file: prefer_const_constructors
// ignore_for_file: prefer_const_constructors_in_immutables
// ignore_for_file: prefer_final_locals
// ignore_for_file: prefer_if_null_operators
// ignore_for_file: prefer_single_quotes
// ignore_for_file: unused_local_variable

class JsonAnimatedDefaultTextStyleBuilder
    extends _JsonAnimatedDefaultTextStyleBuilder {
  const JsonAnimatedDefaultTextStyleBuilder({required super.args});

  static const kType = 'animated_default_text_style';

  /// Constant that can be referenced for the builder's type.
  @override
  String get type => kType;

  /// Static function that is capable of decoding the widget from a dynamic JSON
  /// or YAML set of values.
  static JsonAnimatedDefaultTextStyleBuilder fromDynamic(
    dynamic map, {
    JsonWidgetRegistry? registry,
  }) => JsonAnimatedDefaultTextStyleBuilder(args: map);

  @override
  JsonAnimatedDefaultTextStyleBuilderModel createModel({
    ChildWidgetBuilder? childBuilder,
    required JsonWidgetData data,
  }) {
    final model = JsonAnimatedDefaultTextStyleBuilderModel.fromDynamic(
      args,
      registry: data.jsonWidgetRegistry,
    );

    return model;
  }

  @override
  AnimatedDefaultTextStyle buildCustom({
    ChildWidgetBuilder? childBuilder,
    required BuildContext context,
    required JsonWidgetData data,
    Key? key,
  }) {
    final model = createModel(childBuilder: childBuilder, data: data);

    return AnimatedDefaultTextStyle(
      curve: model.curve,
      duration: model.duration,
      key: key,
      maxLines: model.maxLines,
      onEnd: model.onEnd,
      overflow: model.overflow,
      softWrap: model.softWrap,
      style: model.style,
      textAlign: model.textAlign,
      textHeightBehavior: model.textHeightBehavior,
      textWidthBasis: model.textWidthBasis,
      child: model.child.build(childBuilder: childBuilder, context: context),
    );
  }
}

class JsonAnimatedDefaultTextStyle extends JsonWidgetData {
  JsonAnimatedDefaultTextStyle({
    Map<String, dynamic> args = const {},
    JsonWidgetRegistry? registry,
    this.curve = Curves.linear,
    required this.duration,
    this.maxLines,
    this.onEnd,
    this.overflow = TextOverflow.clip,
    this.softWrap = true,
    required this.style,
    this.textAlign,
    this.textHeightBehavior,
    this.textWidthBasis = TextWidthBasis.parent,
    required this.child,
  }) : super(
         jsonWidgetArgs: JsonAnimatedDefaultTextStyleBuilderModel.fromDynamic(
           {
             'curve': curve,
             'duration': duration,
             'maxLines': maxLines,
             'onEnd': onEnd,
             'overflow': overflow,
             'softWrap': softWrap,
             'style': style,
             'textAlign': textAlign,
             'textHeightBehavior': textHeightBehavior,
             'textWidthBasis': textWidthBasis,
             'child': child,

             ...args,
           },
           args: args,
           registry: registry,
         ),
         jsonWidgetBuilder:
             () => JsonAnimatedDefaultTextStyleBuilder(
               args: JsonAnimatedDefaultTextStyleBuilderModel.fromDynamic(
                 {
                   'curve': curve,
                   'duration': duration,
                   'maxLines': maxLines,
                   'onEnd': onEnd,
                   'overflow': overflow,
                   'softWrap': softWrap,
                   'style': style,
                   'textAlign': textAlign,
                   'textHeightBehavior': textHeightBehavior,
                   'textWidthBasis': textWidthBasis,
                   'child': child,

                   ...args,
                 },
                 args: args,
                 registry: registry,
               ),
             ),
         jsonWidgetType: JsonAnimatedDefaultTextStyleBuilder.kType,
       );

  final Curve curve;

  final Duration duration;

  /* AUTOGENERATED FROM [AnimatedDefaultTextStyle.maxLines]*/
  /// An optional maximum number of lines for the text to span, wrapping if necessary.
  ///
  /// This property takes effect immediately when changed, it is not animated.
  ///
  /// See [DefaultTextStyle.maxLines] for more details.
  final int? maxLines;

  final void Function()? onEnd;

  /* AUTOGENERATED FROM [AnimatedDefaultTextStyle.overflow]*/
  /// How visual overflow should be handled.
  ///
  /// This property takes effect immediately when changed, it is not animated.
  final TextOverflow overflow;

  /* AUTOGENERATED FROM [AnimatedDefaultTextStyle.softWrap]*/
  /// Whether the text should break at soft line breaks.
  ///
  /// This property takes effect immediately when changed, it is not animated.
  ///
  /// See [DefaultTextStyle.softWrap] for more details.
  final bool softWrap;

  /* AUTOGENERATED FROM [AnimatedDefaultTextStyle.style]*/
  /// The target text style.
  ///
  /// When this property is changed, the style will be animated over [duration] time.
  final TextStyle style;

  /* AUTOGENERATED FROM [AnimatedDefaultTextStyle.textAlign]*/
  /// How the text should be aligned horizontally.
  ///
  /// This property takes effect immediately when changed, it is not animated.
  final TextAlign? textAlign;

  /* AUTOGENERATED FROM [AnimatedDefaultTextStyle.textHeightBehavior]*/
  /// {@macro dart.ui.textHeightBehavior}
  final TextHeightBehavior? textHeightBehavior;

  /* AUTOGENERATED FROM [AnimatedDefaultTextStyle.textWidthBasis]*/
  /// The strategy to use when calculating the width of the Text.
  ///
  /// See [TextWidthBasis] for possible values and their implications.
  final TextWidthBasis textWidthBasis;

  /* AUTOGENERATED FROM [AnimatedDefaultTextStyle.child]*/
  /// The widget below this widget in the tree.
  ///
  /// {@macro flutter.widgets.ProxyWidget.child}
  final JsonWidgetData child;
}

/* AUTOGENERATED FROM [AnimatedDefaultTextStyle]*/
/// Creates a widget that animates the default text style implicitly.
class JsonAnimatedDefaultTextStyleBuilderModel extends JsonWidgetBuilderModel {
  const JsonAnimatedDefaultTextStyleBuilderModel(
    super.args, {
    this.curve = Curves.linear,
    required this.duration,
    this.maxLines,
    this.onEnd,
    this.overflow = TextOverflow.clip,
    this.softWrap = true,
    required this.style,
    this.textAlign,
    this.textHeightBehavior,
    this.textWidthBasis = TextWidthBasis.parent,
    required this.child,
  });

  final Curve curve;

  final Duration duration;

  /* AUTOGENERATED FROM [AnimatedDefaultTextStyle.maxLines]*/
  /// An optional maximum number of lines for the text to span, wrapping if necessary.
  ///
  /// This property takes effect immediately when changed, it is not animated.
  ///
  /// See [DefaultTextStyle.maxLines] for more details.
  final int? maxLines;

  final void Function()? onEnd;

  /* AUTOGENERATED FROM [AnimatedDefaultTextStyle.overflow]*/
  /// How visual overflow should be handled.
  ///
  /// This property takes effect immediately when changed, it is not animated.
  final TextOverflow overflow;

  /* AUTOGENERATED FROM [AnimatedDefaultTextStyle.softWrap]*/
  /// Whether the text should break at soft line breaks.
  ///
  /// This property takes effect immediately when changed, it is not animated.
  ///
  /// See [DefaultTextStyle.softWrap] for more details.
  final bool softWrap;

  /* AUTOGENERATED FROM [AnimatedDefaultTextStyle.style]*/
  /// The target text style.
  ///
  /// When this property is changed, the style will be animated over [duration] time.
  final TextStyle style;

  /* AUTOGENERATED FROM [AnimatedDefaultTextStyle.textAlign]*/
  /// How the text should be aligned horizontally.
  ///
  /// This property takes effect immediately when changed, it is not animated.
  final TextAlign? textAlign;

  /* AUTOGENERATED FROM [AnimatedDefaultTextStyle.textHeightBehavior]*/
  /// {@macro dart.ui.textHeightBehavior}
  final TextHeightBehavior? textHeightBehavior;

  /* AUTOGENERATED FROM [AnimatedDefaultTextStyle.textWidthBasis]*/
  /// The strategy to use when calculating the width of the Text.
  ///
  /// See [TextWidthBasis] for possible values and their implications.
  final TextWidthBasis textWidthBasis;

  /* AUTOGENERATED FROM [AnimatedDefaultTextStyle.child]*/
  /// The widget below this widget in the tree.
  ///
  /// {@macro flutter.widgets.ProxyWidget.child}
  final JsonWidgetData child;

  static JsonAnimatedDefaultTextStyleBuilderModel fromDynamic(
    dynamic map, {
    Map<String, dynamic> args = const {},
    JsonWidgetRegistry? registry,
  }) {
    final result = maybeFromDynamic(map, args: args, registry: registry);

    if (result == null) {
      throw Exception(
        '[JsonAnimatedDefaultTextStyleBuilder]: requested to parse from dynamic, but the input is null.',
      );
    }

    return result;
  }

  static JsonAnimatedDefaultTextStyleBuilderModel? maybeFromDynamic(
    dynamic map, {
    Map<String, dynamic> args = const {},
    JsonWidgetRegistry? registry,
  }) {
    JsonAnimatedDefaultTextStyleBuilderModel? result;

    if (map != null) {
      if (map is String) {
        map = yaon.parse(map, normalize: true);
      }

      if (map is JsonAnimatedDefaultTextStyleBuilderModel) {
        result = map;
      } else {
        registry ??= JsonWidgetRegistry.instance;
        map = registry.processArgs(map, <String>{}).value;
        result = JsonAnimatedDefaultTextStyleBuilderModel(
          args,
          curve: () {
            dynamic parsed = CurvesValues.lookup(map['curve']);

            parsed ??= Curves.linear;

            return parsed;
          }(),
          duration: () {
            dynamic parsed = JsonClass.parseDurationFromMillis(map['duration']);

            if (parsed == null) {
              throw Exception(
                'Null value encountered for required parameter: [duration].',
              );
            }
            return parsed;
          }(),
          maxLines: () {
            dynamic parsed = JsonClass.maybeParseInt(map['maxLines']);

            return parsed;
          }(),
          onEnd: map['onEnd'],
          overflow: () {
            dynamic parsed = ThemeDecoder.decodeTextOverflow(
              map['overflow'],
              validate: false,
            );
            parsed ??= TextOverflow.clip;

            return parsed;
          }(),
          softWrap: JsonClass.parseBool(map['softWrap'], whenNull: true),
          style: () {
            dynamic parsed = ThemeDecoder.decodeTextStyle(
              map['style'],
              validate: false,
            );

            if (parsed == null) {
              throw Exception(
                'Null value encountered for required parameter: [style].',
              );
            }
            return parsed;
          }(),
          textAlign: () {
            dynamic parsed = ThemeDecoder.decodeTextAlign(
              map['textAlign'],
              validate: false,
            );

            return parsed;
          }(),
          textHeightBehavior: () {
            dynamic parsed = ThemeDecoder.decodeTextHeightBehavior(
              map['textHeightBehavior'],
              validate: false,
            );

            return parsed;
          }(),
          textWidthBasis: () {
            dynamic parsed = ThemeDecoder.decodeTextWidthBasis(
              map['textWidthBasis'],
              validate: false,
            );
            parsed ??= TextWidthBasis.parent;

            return parsed;
          }(),
          child: () {
            dynamic parsed = JsonWidgetData.fromDynamic(
              map['child'],
              registry: registry,
            );

            if (parsed == null) {
              throw Exception(
                'Null value encountered for required parameter: [child].',
              );
            }
            return parsed;
          }(),
        );
      }
    }

    return result;
  }

  @override
  Map<String, dynamic> toJson() {
    return JsonClass.removeNull({
      'curve': Curves.linear == curve ? null : CurvesValues.encode(curve),
      'duration': duration.inMilliseconds,
      'maxLines': maxLines,
      'onEnd': onEnd,
      'overflow':
          TextOverflow.clip == overflow
              ? null
              : ThemeEncoder.encodeTextOverflow(overflow),
      'softWrap': true == softWrap ? null : softWrap,
      'style': ThemeEncoder.encodeTextStyle(style),
      'textAlign': ThemeEncoder.encodeTextAlign(textAlign),
      'textHeightBehavior': ThemeEncoder.encodeTextHeightBehavior(
        textHeightBehavior,
      ),
      'textWidthBasis':
          TextWidthBasis.parent == textWidthBasis
              ? null
              : ThemeEncoder.encodeTextWidthBasis(textWidthBasis),
      'child': child.toJson(),

      ...args,
    });
  }
}

class AnimatedDefaultTextStyleSchema {
  static const id =
      'https://peiffer-innovations.github.io/flutter_json_schemas/schemas/json_dynamic_widget/animated_default_text_style.json';

  static final schema = <String, Object>{
    r'$schema': 'http://json-schema.org/draft-07/schema#',
    r'$id': id,
    'title': 'AnimatedDefaultTextStyle',
    'type': 'object',
    'additionalProperties': false,
    'properties': {
      'curve': SchemaHelper.anySchema,
      'duration': SchemaHelper.anySchema,
      'maxLines': SchemaHelper.numberSchema,
      'onEnd': SchemaHelper.anySchema,
      'overflow': SchemaHelper.objectSchema(TextOverflowSchema.id),
      'softWrap': SchemaHelper.boolSchema,
      'style': SchemaHelper.objectSchema(TextStyleSchema.id),
      'textAlign': SchemaHelper.objectSchema(TextAlignSchema.id),
      'textHeightBehavior': SchemaHelper.objectSchema(
        TextHeightBehaviorSchema.id,
      ),
      'textWidthBasis': SchemaHelper.objectSchema(TextWidthBasisSchema.id),
      'child': SchemaHelper.objectSchema(JsonWidgetDataSchema.id),
    },
    'required': ['duration', 'style', 'child'],
  };
}
