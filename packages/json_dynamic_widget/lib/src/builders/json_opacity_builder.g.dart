// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'json_opacity_builder.dart';

// **************************************************************************
// Generator: JsonWidgetLibraryBuilder
// **************************************************************************

// ignore_for_file: avoid_init_to_null
// ignore_for_file: deprecated_member_use

// ignore_for_file: prefer_const_constructors
// ignore_for_file: prefer_const_constructors_in_immutables
// ignore_for_file: prefer_final_locals
// ignore_for_file: prefer_if_null_operators
// ignore_for_file: prefer_single_quotes
// ignore_for_file: unused_local_variable

class JsonOpacityBuilder extends _JsonOpacityBuilder {
  const JsonOpacityBuilder({required super.args});

  static const kType = 'opacity';

  /// Constant that can be referenced for the builder's type.
  @override
  String get type => kType;

  /// Static function that is capable of decoding the widget from a dynamic JSON
  /// or YAML set of values.
  static JsonOpacityBuilder fromDynamic(
    dynamic map, {
    JsonWidgetRegistry? registry,
  }) => JsonOpacityBuilder(args: map);

  @override
  JsonOpacityBuilderModel createModel({
    ChildWidgetBuilder? childBuilder,
    required JsonWidgetData data,
  }) {
    final model = JsonOpacityBuilderModel.fromDynamic(
      args,
      registry: data.jsonWidgetRegistry,
    );

    return model;
  }

  @override
  Opacity buildCustom({
    ChildWidgetBuilder? childBuilder,
    required BuildContext context,
    required JsonWidgetData data,
    Key? key,
  }) {
    final model = createModel(childBuilder: childBuilder, data: data);

    return Opacity(
      alwaysIncludeSemantics: model.alwaysIncludeSemantics,
      key: key,
      opacity: model.opacity,
      child: model.child?.build(childBuilder: childBuilder, context: context),
    );
  }
}

class JsonOpacity extends JsonWidgetData {
  JsonOpacity({
    Map<String, dynamic> args = const {},
    JsonWidgetRegistry? registry,
    this.alwaysIncludeSemantics = false,
    required this.opacity,
    this.child,
  }) : super(
         jsonWidgetArgs: JsonOpacityBuilderModel.fromDynamic(
           {
             'alwaysIncludeSemantics': alwaysIncludeSemantics,
             'opacity': opacity,
             'child': child,

             ...args,
           },
           args: args,
           registry: registry,
         ),
         jsonWidgetBuilder:
             () => JsonOpacityBuilder(
               args: JsonOpacityBuilderModel.fromDynamic(
                 {
                   'alwaysIncludeSemantics': alwaysIncludeSemantics,
                   'opacity': opacity,
                   'child': child,

                   ...args,
                 },
                 args: args,
                 registry: registry,
               ),
             ),
         jsonWidgetType: JsonOpacityBuilder.kType,
       );

  /* AUTOGENERATED FROM [Opacity.alwaysIncludeSemantics]*/
  /// Whether the semantic information of the children is always included.
  ///
  /// Defaults to false.
  ///
  /// When true, regardless of the opacity settings the child semantic
  /// information is exposed as if the widget were fully visible. This is
  /// useful in cases where labels may be hidden during animations that
  /// would otherwise contribute relevant semantics.
  final bool alwaysIncludeSemantics;

  /* AUTOGENERATED FROM [Opacity.opacity]*/
  /// The fraction to scale the child's alpha value.
  ///
  /// An opacity of one is fully opaque. An opacity of zero is fully transparent
  /// (i.e., invisible).
  ///
  /// Values one and zero are painted with a fast path. Other values require
  /// painting the child into an intermediate buffer, which is expensive.
  final double opacity;

  final JsonWidgetData? child;
}

/* AUTOGENERATED FROM [Opacity]*/
/// Creates a widget that makes its child partially transparent.
///
/// The [opacity] argument must be between zero and one, inclusive.
class JsonOpacityBuilderModel extends JsonWidgetBuilderModel {
  const JsonOpacityBuilderModel(
    super.args, {
    this.alwaysIncludeSemantics = false,
    required this.opacity,
    this.child,
  });

  /* AUTOGENERATED FROM [Opacity.alwaysIncludeSemantics]*/
  /// Whether the semantic information of the children is always included.
  ///
  /// Defaults to false.
  ///
  /// When true, regardless of the opacity settings the child semantic
  /// information is exposed as if the widget were fully visible. This is
  /// useful in cases where labels may be hidden during animations that
  /// would otherwise contribute relevant semantics.
  final bool alwaysIncludeSemantics;

  /* AUTOGENERATED FROM [Opacity.opacity]*/
  /// The fraction to scale the child's alpha value.
  ///
  /// An opacity of one is fully opaque. An opacity of zero is fully transparent
  /// (i.e., invisible).
  ///
  /// Values one and zero are painted with a fast path. Other values require
  /// painting the child into an intermediate buffer, which is expensive.
  final double opacity;

  final JsonWidgetData? child;

  static JsonOpacityBuilderModel fromDynamic(
    dynamic map, {
    Map<String, dynamic> args = const {},
    JsonWidgetRegistry? registry,
  }) {
    final result = maybeFromDynamic(map, args: args, registry: registry);

    if (result == null) {
      throw Exception(
        '[JsonOpacityBuilder]: requested to parse from dynamic, but the input is null.',
      );
    }

    return result;
  }

  static JsonOpacityBuilderModel? maybeFromDynamic(
    dynamic map, {
    Map<String, dynamic> args = const {},
    JsonWidgetRegistry? registry,
  }) {
    JsonOpacityBuilderModel? result;

    if (map != null) {
      if (map is String) {
        map = yaon.parse(map, normalize: true);
      }

      if (map is JsonOpacityBuilderModel) {
        result = map;
      } else {
        registry ??= JsonWidgetRegistry.instance;
        map = registry.processArgs(map, <String>{}).value;
        result = JsonOpacityBuilderModel(
          args,
          alwaysIncludeSemantics: JsonClass.parseBool(
            map['alwaysIncludeSemantics'],
            whenNull: false,
          ),
          opacity: () {
            dynamic parsed = JsonClass.parseDouble(map['opacity']);

            if (parsed == null) {
              throw Exception(
                'Null value encountered for required parameter: [opacity].',
              );
            }
            return parsed;
          }(),
          child: () {
            dynamic parsed = JsonWidgetData.maybeFromDynamic(
              map['child'],
              registry: registry,
            );

            return parsed;
          }(),
        );
      }
    }

    return result;
  }

  @override
  Map<String, dynamic> toJson() {
    return JsonClass.removeNull({
      'alwaysIncludeSemantics':
          false == alwaysIncludeSemantics ? null : alwaysIncludeSemantics,
      'opacity': opacity,
      'child': child?.toJson(),

      ...args,
    });
  }
}

class OpacitySchema {
  static const id =
      'https://peiffer-innovations.github.io/flutter_json_schemas/schemas/json_dynamic_widget/opacity.json';

  static final schema = <String, Object>{
    r'$schema': 'http://json-schema.org/draft-07/schema#',
    r'$id': id,
    'title': 'Opacity',
    'type': 'object',
    'additionalProperties': false,
    'properties': {
      'alwaysIncludeSemantics': SchemaHelper.boolSchema,
      'opacity': SchemaHelper.numberSchema,
      'child': SchemaHelper.objectSchema(JsonWidgetDataSchema.id),
    },
    'required': ['opacity'],
  };
}
