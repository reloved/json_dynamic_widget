// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'json_error_widget_builder.dart';

// **************************************************************************
// Generator: JsonWidgetLibraryBuilder
// **************************************************************************

// ignore_for_file: avoid_init_to_null
// ignore_for_file: deprecated_member_use

// ignore_for_file: prefer_const_constructors
// ignore_for_file: prefer_const_constructors_in_immutables
// ignore_for_file: prefer_final_locals
// ignore_for_file: prefer_if_null_operators
// ignore_for_file: prefer_single_quotes
// ignore_for_file: unused_local_variable

class JsonErrorWidgetBuilder extends _JsonErrorWidgetBuilder {
  const JsonErrorWidgetBuilder({required super.args});

  static const kType = 'error_widget';

  /// Constant that can be referenced for the builder's type.
  @override
  String get type => kType;

  /// Static function that is capable of decoding the widget from a dynamic JSON
  /// or YAML set of values.
  static JsonErrorWidgetBuilder fromDynamic(
    dynamic map, {
    JsonWidgetRegistry? registry,
  }) => JsonErrorWidgetBuilder(args: map);

  @override
  JsonErrorWidgetBuilderModel createModel({
    ChildWidgetBuilder? childBuilder,
    required JsonWidgetData data,
  }) {
    final model = JsonErrorWidgetBuilderModel.fromDynamic(
      args,
      registry: data.jsonWidgetRegistry,
    );

    return model;
  }

  @override
  ErrorWidget buildCustom({
    ChildWidgetBuilder? childBuilder,
    required BuildContext context,
    required JsonWidgetData data,
    Key? key,
  }) {
    final model = createModel(childBuilder: childBuilder, data: data);

    return ErrorWidget(model.exception);
  }
}

class JsonErrorWidget extends JsonWidgetData {
  JsonErrorWidget(
    this.exception, {
    Map<String, dynamic> args = const {},
    JsonWidgetRegistry? registry,
  }) : super(
         jsonWidgetArgs: JsonErrorWidgetBuilderModel.fromDynamic(
           {'exception': exception, ...args},
           args: args,
           registry: registry,
         ),
         jsonWidgetBuilder:
             () => JsonErrorWidgetBuilder(
               args: JsonErrorWidgetBuilderModel.fromDynamic(
                 {'exception': exception, ...args},
                 args: args,
                 registry: registry,
               ),
             ),
         jsonWidgetType: JsonErrorWidgetBuilder.kType,
       );

  final Object exception;
}

/* AUTOGENERATED FROM [ErrorWidget]*/
/// Creates a widget that displays the given exception.
///
/// The message will be the stringification of the given exception, unless
/// computing that value itself throws an exception, in which case it will
/// be the string "Error".
///
/// If this object is inspected from an IDE or the devtools, and the original
/// exception is a [FlutterError] object, the original exception itself will
/// be shown in the inspection output.
class JsonErrorWidgetBuilderModel extends JsonWidgetBuilderModel {
  const JsonErrorWidgetBuilderModel(super.args, {required this.exception});

  final Object exception;

  static JsonErrorWidgetBuilderModel fromDynamic(
    dynamic map, {
    Map<String, dynamic> args = const {},
    JsonWidgetRegistry? registry,
  }) {
    final result = maybeFromDynamic(map, args: args, registry: registry);

    if (result == null) {
      throw Exception(
        '[JsonErrorWidgetBuilder]: requested to parse from dynamic, but the input is null.',
      );
    }

    return result;
  }

  static JsonErrorWidgetBuilderModel? maybeFromDynamic(
    dynamic map, {
    Map<String, dynamic> args = const {},
    JsonWidgetRegistry? registry,
  }) {
    JsonErrorWidgetBuilderModel? result;

    if (map != null) {
      if (map is String) {
        map = yaon.parse(map, normalize: true);
      }

      if (map is JsonErrorWidgetBuilderModel) {
        result = map;
      } else {
        registry ??= JsonWidgetRegistry.instance;
        map = registry.processArgs(map, <String>{}).value;
        result = JsonErrorWidgetBuilderModel(args, exception: map['exception']);
      }
    }

    return result;
  }

  @override
  Map<String, dynamic> toJson() {
    return JsonClass.removeNull({'exception': exception, ...args});
  }
}

class ErrorWidgetSchema {
  static const id =
      'https://peiffer-innovations.github.io/flutter_json_schemas/schemas/json_dynamic_widget/error_widget.json';

  static final schema = <String, Object>{
    r'$schema': 'http://json-schema.org/draft-07/schema#',
    r'$id': id,
    'title': 'ErrorWidget',
    'type': 'object',
    'additionalProperties': false,
    'properties': {'exception': SchemaHelper.anySchema},
    'required': ['exception'],
  };
}
