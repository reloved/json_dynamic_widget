// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'json_animated_physical_model_builder.dart';

// **************************************************************************
// Generator: JsonWidgetLibraryBuilder
// **************************************************************************

// ignore_for_file: avoid_init_to_null
// ignore_for_file: deprecated_member_use

// ignore_for_file: prefer_const_constructors
// ignore_for_file: prefer_const_constructors_in_immutables
// ignore_for_file: prefer_final_locals
// ignore_for_file: prefer_if_null_operators
// ignore_for_file: prefer_single_quotes
// ignore_for_file: unused_local_variable

class JsonAnimatedPhysicalModelBuilder
    extends _JsonAnimatedPhysicalModelBuilder {
  const JsonAnimatedPhysicalModelBuilder({required super.args});

  static const kType = 'animated_physical_model';

  /// Constant that can be referenced for the builder's type.
  @override
  String get type => kType;

  /// Static function that is capable of decoding the widget from a dynamic JSON
  /// or YAML set of values.
  static JsonAnimatedPhysicalModelBuilder fromDynamic(
    dynamic map, {
    JsonWidgetRegistry? registry,
  }) => JsonAnimatedPhysicalModelBuilder(args: map);

  @override
  JsonAnimatedPhysicalModelBuilderModel createModel({
    ChildWidgetBuilder? childBuilder,
    required JsonWidgetData data,
  }) {
    final model = JsonAnimatedPhysicalModelBuilderModel.fromDynamic(
      args,
      registry: data.jsonWidgetRegistry,
    );

    return model;
  }

  @override
  AnimatedPhysicalModel buildCustom({
    ChildWidgetBuilder? childBuilder,
    required BuildContext context,
    required JsonWidgetData data,
    Key? key,
  }) {
    final model = createModel(childBuilder: childBuilder, data: data);

    return AnimatedPhysicalModel(
      animateColor: model.animateColor,
      animateShadowColor: model.animateShadowColor,
      borderRadius: model.borderRadius,
      clipBehavior: model.clipBehavior,
      color: model.color,
      curve: model.curve,
      duration: model.duration,
      elevation: model.elevation,
      key: key,
      onEnd: model.onEnd,
      shadowColor: model.shadowColor,
      shape: model.shape,
      child: model.child.build(childBuilder: childBuilder, context: context),
    );
  }
}

class JsonAnimatedPhysicalModel extends JsonWidgetData {
  JsonAnimatedPhysicalModel({
    Map<String, dynamic> args = const {},
    JsonWidgetRegistry? registry,
    this.animateColor = true,
    this.animateShadowColor = true,
    this.borderRadius,
    this.clipBehavior = Clip.none,
    required this.color,
    this.curve = Curves.linear,
    required this.duration,
    this.elevation = 0.0,
    this.onEnd,
    required this.shadowColor,
    this.shape = BoxShape.rectangle,
    required this.child,
  }) : super(
         jsonWidgetArgs: JsonAnimatedPhysicalModelBuilderModel.fromDynamic(
           {
             'animateColor': animateColor,
             'animateShadowColor': animateShadowColor,
             'borderRadius': borderRadius,
             'clipBehavior': clipBehavior,
             'color': color,
             'curve': curve,
             'duration': duration,
             'elevation': elevation,
             'onEnd': onEnd,
             'shadowColor': shadowColor,
             'shape': shape,
             'child': child,

             ...args,
           },
           args: args,
           registry: registry,
         ),
         jsonWidgetBuilder:
             () => JsonAnimatedPhysicalModelBuilder(
               args: JsonAnimatedPhysicalModelBuilderModel.fromDynamic(
                 {
                   'animateColor': animateColor,
                   'animateShadowColor': animateShadowColor,
                   'borderRadius': borderRadius,
                   'clipBehavior': clipBehavior,
                   'color': color,
                   'curve': curve,
                   'duration': duration,
                   'elevation': elevation,
                   'onEnd': onEnd,
                   'shadowColor': shadowColor,
                   'shape': shape,
                   'child': child,

                   ...args,
                 },
                 args: args,
                 registry: registry,
               ),
             ),
         jsonWidgetType: JsonAnimatedPhysicalModelBuilder.kType,
       );

  /* AUTOGENERATED FROM [AnimatedPhysicalModel.animateColor]*/
  /// Whether the color should be animated.
  final bool animateColor;

  /* AUTOGENERATED FROM [AnimatedPhysicalModel.animateShadowColor]*/
  /// Whether the shadow color should be animated.
  final bool animateShadowColor;

  /* AUTOGENERATED FROM [AnimatedPhysicalModel.borderRadius]*/
  /// The target border radius of the rounded corners for a rectangle shape.
  ///
  /// If null, treated as [BorderRadius.zero].
  final BorderRadius? borderRadius;

  /* AUTOGENERATED FROM [AnimatedPhysicalModel.clipBehavior]*/
  /// {@macro flutter.material.Material.clipBehavior}
  ///
  /// Defaults to [Clip.none].
  final Clip clipBehavior;

  /* AUTOGENERATED FROM [AnimatedPhysicalModel.color]*/
  /// The target background color.
  final Color color;

  final Curve curve;

  final Duration duration;

  /* AUTOGENERATED FROM [AnimatedPhysicalModel.elevation]*/
  /// The target z-coordinate relative to the parent at which to place this
  /// physical object.
  ///
  /// The value will always be non-negative.
  final double elevation;

  final void Function()? onEnd;

  /* AUTOGENERATED FROM [AnimatedPhysicalModel.shadowColor]*/
  /// The target shadow color.
  final Color shadowColor;

  /* AUTOGENERATED FROM [AnimatedPhysicalModel.shape]*/
  /// The type of shape.
  ///
  /// This property is not animated.
  final BoxShape shape;

  /* AUTOGENERATED FROM [AnimatedPhysicalModel.child]*/
  /// The widget below this widget in the tree.
  ///
  /// {@macro flutter.widgets.ProxyWidget.child}
  final JsonWidgetData child;
}

/* AUTOGENERATED FROM [AnimatedPhysicalModel]*/
/// Creates a widget that animates the properties of a [PhysicalModel].
///
/// The [elevation] must be non-negative.
///
/// Animating [color] is optional and is controlled by the [animateColor] flag.
///
/// Animating [shadowColor] is optional and is controlled by the [animateShadowColor] flag.
class JsonAnimatedPhysicalModelBuilderModel extends JsonWidgetBuilderModel {
  const JsonAnimatedPhysicalModelBuilderModel(
    super.args, {
    this.animateColor = true,
    this.animateShadowColor = true,
    this.borderRadius,
    this.clipBehavior = Clip.none,
    required this.color,
    this.curve = Curves.linear,
    required this.duration,
    this.elevation = 0.0,
    this.onEnd,
    required this.shadowColor,
    this.shape = BoxShape.rectangle,
    required this.child,
  });

  /* AUTOGENERATED FROM [AnimatedPhysicalModel.animateColor]*/
  /// Whether the color should be animated.
  final bool animateColor;

  /* AUTOGENERATED FROM [AnimatedPhysicalModel.animateShadowColor]*/
  /// Whether the shadow color should be animated.
  final bool animateShadowColor;

  /* AUTOGENERATED FROM [AnimatedPhysicalModel.borderRadius]*/
  /// The target border radius of the rounded corners for a rectangle shape.
  ///
  /// If null, treated as [BorderRadius.zero].
  final BorderRadius? borderRadius;

  /* AUTOGENERATED FROM [AnimatedPhysicalModel.clipBehavior]*/
  /// {@macro flutter.material.Material.clipBehavior}
  ///
  /// Defaults to [Clip.none].
  final Clip clipBehavior;

  /* AUTOGENERATED FROM [AnimatedPhysicalModel.color]*/
  /// The target background color.
  final Color color;

  final Curve curve;

  final Duration duration;

  /* AUTOGENERATED FROM [AnimatedPhysicalModel.elevation]*/
  /// The target z-coordinate relative to the parent at which to place this
  /// physical object.
  ///
  /// The value will always be non-negative.
  final double elevation;

  final void Function()? onEnd;

  /* AUTOGENERATED FROM [AnimatedPhysicalModel.shadowColor]*/
  /// The target shadow color.
  final Color shadowColor;

  /* AUTOGENERATED FROM [AnimatedPhysicalModel.shape]*/
  /// The type of shape.
  ///
  /// This property is not animated.
  final BoxShape shape;

  /* AUTOGENERATED FROM [AnimatedPhysicalModel.child]*/
  /// The widget below this widget in the tree.
  ///
  /// {@macro flutter.widgets.ProxyWidget.child}
  final JsonWidgetData child;

  static JsonAnimatedPhysicalModelBuilderModel fromDynamic(
    dynamic map, {
    Map<String, dynamic> args = const {},
    JsonWidgetRegistry? registry,
  }) {
    final result = maybeFromDynamic(map, args: args, registry: registry);

    if (result == null) {
      throw Exception(
        '[JsonAnimatedPhysicalModelBuilder]: requested to parse from dynamic, but the input is null.',
      );
    }

    return result;
  }

  static JsonAnimatedPhysicalModelBuilderModel? maybeFromDynamic(
    dynamic map, {
    Map<String, dynamic> args = const {},
    JsonWidgetRegistry? registry,
  }) {
    JsonAnimatedPhysicalModelBuilderModel? result;

    if (map != null) {
      if (map is String) {
        map = yaon.parse(map, normalize: true);
      }

      if (map is JsonAnimatedPhysicalModelBuilderModel) {
        result = map;
      } else {
        registry ??= JsonWidgetRegistry.instance;
        map = registry.processArgs(map, <String>{}).value;
        result = JsonAnimatedPhysicalModelBuilderModel(
          args,
          animateColor: JsonClass.parseBool(
            map['animateColor'],
            whenNull: true,
          ),
          animateShadowColor: JsonClass.parseBool(
            map['animateShadowColor'],
            whenNull: true,
          ),
          borderRadius: () {
            dynamic parsed = ThemeDecoder.decodeBorderRadius(
              map['borderRadius'],
              validate: false,
            );

            return parsed;
          }(),
          clipBehavior: () {
            dynamic parsed = ThemeDecoder.decodeClip(
              map['clipBehavior'],
              validate: false,
            );
            parsed ??= Clip.none;

            return parsed;
          }(),
          color: () {
            dynamic parsed = ThemeDecoder.decodeColor(
              map['color'],
              validate: false,
            );

            if (parsed == null) {
              throw Exception(
                'Null value encountered for required parameter: [color].',
              );
            }
            return parsed;
          }(),
          curve: () {
            dynamic parsed = CurvesValues.lookup(map['curve']);

            parsed ??= Curves.linear;

            return parsed;
          }(),
          duration: () {
            dynamic parsed = JsonClass.parseDurationFromMillis(map['duration']);

            if (parsed == null) {
              throw Exception(
                'Null value encountered for required parameter: [duration].',
              );
            }
            return parsed;
          }(),
          elevation: () {
            dynamic parsed = JsonClass.maybeParseDouble(map['elevation']);

            parsed ??= 0.0;

            return parsed;
          }(),
          onEnd: map['onEnd'],
          shadowColor: () {
            dynamic parsed = ThemeDecoder.decodeColor(
              map['shadowColor'],
              validate: false,
            );

            if (parsed == null) {
              throw Exception(
                'Null value encountered for required parameter: [shadowColor].',
              );
            }
            return parsed;
          }(),
          shape: () {
            dynamic parsed = ThemeDecoder.decodeBoxShape(
              map['shape'],
              validate: false,
            );
            parsed ??= BoxShape.rectangle;

            return parsed;
          }(),
          child: () {
            dynamic parsed = JsonWidgetData.fromDynamic(
              map['child'],
              registry: registry,
            );

            if (parsed == null) {
              throw Exception(
                'Null value encountered for required parameter: [child].',
              );
            }
            return parsed;
          }(),
        );
      }
    }

    return result;
  }

  @override
  Map<String, dynamic> toJson() {
    return JsonClass.removeNull({
      'animateColor': true == animateColor ? null : animateColor,
      'animateShadowColor':
          true == animateShadowColor ? null : animateShadowColor,
      'borderRadius': ThemeEncoder.encodeBorderRadius(borderRadius),
      'clipBehavior':
          Clip.none == clipBehavior
              ? null
              : ThemeEncoder.encodeClip(clipBehavior),
      'color': ThemeEncoder.encodeColor(color),
      'curve': Curves.linear == curve ? null : CurvesValues.encode(curve),
      'duration': duration.inMilliseconds,
      'elevation': 0.0 == elevation ? null : elevation,
      'onEnd': onEnd,
      'shadowColor': ThemeEncoder.encodeColor(shadowColor),
      'shape':
          BoxShape.rectangle == shape
              ? null
              : ThemeEncoder.encodeBoxShape(shape),
      'child': child.toJson(),

      ...args,
    });
  }
}

class AnimatedPhysicalModelSchema {
  static const id =
      'https://peiffer-innovations.github.io/flutter_json_schemas/schemas/json_dynamic_widget/animated_physical_model.json';

  static final schema = <String, Object>{
    r'$schema': 'http://json-schema.org/draft-07/schema#',
    r'$id': id,
    'title': 'AnimatedPhysicalModel',
    'type': 'object',
    'additionalProperties': false,
    'properties': {
      'animateColor': SchemaHelper.boolSchema,
      'animateShadowColor': SchemaHelper.boolSchema,
      'borderRadius': SchemaHelper.objectSchema(BorderRadiusSchema.id),
      'clipBehavior': SchemaHelper.objectSchema(ClipSchema.id),
      'color': SchemaHelper.objectSchema(ColorSchema.id),
      'curve': SchemaHelper.anySchema,
      'duration': SchemaHelper.anySchema,
      'elevation': SchemaHelper.numberSchema,
      'onEnd': SchemaHelper.anySchema,
      'shadowColor': SchemaHelper.objectSchema(ColorSchema.id),
      'shape': SchemaHelper.objectSchema(BoxShapeSchema.id),
      'child': SchemaHelper.objectSchema(JsonWidgetDataSchema.id),
    },
    'required': ['color', 'duration', 'shadowColor', 'child'],
  };
}
