// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'json_fitted_box_builder.dart';

// **************************************************************************
// Generator: JsonWidgetLibraryBuilder
// **************************************************************************

// ignore_for_file: avoid_init_to_null
// ignore_for_file: deprecated_member_use

// ignore_for_file: prefer_const_constructors
// ignore_for_file: prefer_const_constructors_in_immutables
// ignore_for_file: prefer_final_locals
// ignore_for_file: prefer_if_null_operators
// ignore_for_file: prefer_single_quotes
// ignore_for_file: unused_local_variable

class JsonFittedBoxBuilder extends _JsonFittedBoxBuilder {
  const JsonFittedBoxBuilder({required super.args});

  static const kType = 'fitted_box';

  /// Constant that can be referenced for the builder's type.
  @override
  String get type => kType;

  /// Static function that is capable of decoding the widget from a dynamic JSON
  /// or YAML set of values.
  static JsonFittedBoxBuilder fromDynamic(
    dynamic map, {
    JsonWidgetRegistry? registry,
  }) => JsonFittedBoxBuilder(args: map);

  @override
  JsonFittedBoxBuilderModel createModel({
    ChildWidgetBuilder? childBuilder,
    required JsonWidgetData data,
  }) {
    final model = JsonFittedBoxBuilderModel.fromDynamic(
      args,
      registry: data.jsonWidgetRegistry,
    );

    return model;
  }

  @override
  FittedBox buildCustom({
    ChildWidgetBuilder? childBuilder,
    required BuildContext context,
    required JsonWidgetData data,
    Key? key,
  }) {
    final model = createModel(childBuilder: childBuilder, data: data);

    return FittedBox(
      alignment: model.alignment,
      clipBehavior: model.clipBehavior,
      fit: model.fit,
      key: key,
      child: model.child?.build(childBuilder: childBuilder, context: context),
    );
  }
}

class JsonFittedBox extends JsonWidgetData {
  JsonFittedBox({
    Map<String, dynamic> args = const {},
    JsonWidgetRegistry? registry,
    this.alignment = Alignment.center,
    this.clipBehavior = Clip.none,
    this.fit = BoxFit.contain,
    this.child,
  }) : super(
         jsonWidgetArgs: JsonFittedBoxBuilderModel.fromDynamic(
           {
             'alignment': alignment,
             'clipBehavior': clipBehavior,
             'fit': fit,
             'child': child,

             ...args,
           },
           args: args,
           registry: registry,
         ),
         jsonWidgetBuilder:
             () => JsonFittedBoxBuilder(
               args: JsonFittedBoxBuilderModel.fromDynamic(
                 {
                   'alignment': alignment,
                   'clipBehavior': clipBehavior,
                   'fit': fit,
                   'child': child,

                   ...args,
                 },
                 args: args,
                 registry: registry,
               ),
             ),
         jsonWidgetType: JsonFittedBoxBuilder.kType,
       );

  /* AUTOGENERATED FROM [FittedBox.alignment]*/
  /// How to align the child within its parent's bounds.
  ///
  /// An alignment of (-1.0, -1.0) aligns the child to the top-left corner of its
  /// parent's bounds. An alignment of (1.0, 0.0) aligns the child to the middle
  /// of the right edge of its parent's bounds.
  ///
  /// Defaults to [Alignment.center].
  ///
  /// See also:
  ///
  ///  * [Alignment], a class with convenient constants typically used to
  ///    specify an [AlignmentGeometry].
  ///  * [AlignmentDirectional], like [Alignment] for specifying alignments
  ///    relative to text direction.
  final AlignmentGeometry alignment;

  /* AUTOGENERATED FROM [FittedBox.clipBehavior]*/
  /// {@macro flutter.material.Material.clipBehavior}
  ///
  /// Defaults to [Clip.none].
  final Clip clipBehavior;

  /* AUTOGENERATED FROM [FittedBox.fit]*/
  /// How to inscribe the child into the space allocated during layout.
  final BoxFit fit;

  final JsonWidgetData? child;
}

/* AUTOGENERATED FROM [FittedBox]*/
/// Creates a widget that scales and positions its child within itself according to [fit].
class JsonFittedBoxBuilderModel extends JsonWidgetBuilderModel {
  const JsonFittedBoxBuilderModel(
    super.args, {
    this.alignment = Alignment.center,
    this.clipBehavior = Clip.none,
    this.fit = BoxFit.contain,
    this.child,
  });

  /* AUTOGENERATED FROM [FittedBox.alignment]*/
  /// How to align the child within its parent's bounds.
  ///
  /// An alignment of (-1.0, -1.0) aligns the child to the top-left corner of its
  /// parent's bounds. An alignment of (1.0, 0.0) aligns the child to the middle
  /// of the right edge of its parent's bounds.
  ///
  /// Defaults to [Alignment.center].
  ///
  /// See also:
  ///
  ///  * [Alignment], a class with convenient constants typically used to
  ///    specify an [AlignmentGeometry].
  ///  * [AlignmentDirectional], like [Alignment] for specifying alignments
  ///    relative to text direction.
  final AlignmentGeometry alignment;

  /* AUTOGENERATED FROM [FittedBox.clipBehavior]*/
  /// {@macro flutter.material.Material.clipBehavior}
  ///
  /// Defaults to [Clip.none].
  final Clip clipBehavior;

  /* AUTOGENERATED FROM [FittedBox.fit]*/
  /// How to inscribe the child into the space allocated during layout.
  final BoxFit fit;

  final JsonWidgetData? child;

  static JsonFittedBoxBuilderModel fromDynamic(
    dynamic map, {
    Map<String, dynamic> args = const {},
    JsonWidgetRegistry? registry,
  }) {
    final result = maybeFromDynamic(map, args: args, registry: registry);

    if (result == null) {
      throw Exception(
        '[JsonFittedBoxBuilder]: requested to parse from dynamic, but the input is null.',
      );
    }

    return result;
  }

  static JsonFittedBoxBuilderModel? maybeFromDynamic(
    dynamic map, {
    Map<String, dynamic> args = const {},
    JsonWidgetRegistry? registry,
  }) {
    JsonFittedBoxBuilderModel? result;

    if (map != null) {
      if (map is String) {
        map = yaon.parse(map, normalize: true);
      }

      if (map is JsonFittedBoxBuilderModel) {
        result = map;
      } else {
        registry ??= JsonWidgetRegistry.instance;
        map = registry.processArgs(map, <String>{}).value;
        result = JsonFittedBoxBuilderModel(
          args,
          alignment: () {
            dynamic parsed = ThemeDecoder.decodeAlignmentGeometry(
              map['alignment'],
              validate: false,
            );
            parsed ??= Alignment.center;

            return parsed;
          }(),
          clipBehavior: () {
            dynamic parsed = ThemeDecoder.decodeClip(
              map['clipBehavior'],
              validate: false,
            );
            parsed ??= Clip.none;

            return parsed;
          }(),
          fit: () {
            dynamic parsed = ThemeDecoder.decodeBoxFit(
              map['fit'],
              validate: false,
            );
            parsed ??= BoxFit.contain;

            return parsed;
          }(),
          child: () {
            dynamic parsed = JsonWidgetData.maybeFromDynamic(
              map['child'],
              registry: registry,
            );

            return parsed;
          }(),
        );
      }
    }

    return result;
  }

  @override
  Map<String, dynamic> toJson() {
    return JsonClass.removeNull({
      'alignment':
          Alignment.center == alignment
              ? null
              : ThemeEncoder.encodeAlignmentGeometry(alignment),
      'clipBehavior':
          Clip.none == clipBehavior
              ? null
              : ThemeEncoder.encodeClip(clipBehavior),
      'fit': BoxFit.contain == fit ? null : ThemeEncoder.encodeBoxFit(fit),
      'child': child?.toJson(),

      ...args,
    });
  }
}

class FittedBoxSchema {
  static const id =
      'https://peiffer-innovations.github.io/flutter_json_schemas/schemas/json_dynamic_widget/fitted_box.json';

  static final schema = <String, Object>{
    r'$schema': 'http://json-schema.org/draft-07/schema#',
    r'$id': id,
    'title': 'FittedBox',
    'type': 'object',
    'additionalProperties': false,
    'properties': {
      'alignment': SchemaHelper.objectSchema(AlignmentGeometrySchema.id),
      'clipBehavior': SchemaHelper.objectSchema(ClipSchema.id),
      'fit': SchemaHelper.objectSchema(BoxFitSchema.id),
      'child': SchemaHelper.objectSchema(JsonWidgetDataSchema.id),
    },
    'required': [],
  };
}
