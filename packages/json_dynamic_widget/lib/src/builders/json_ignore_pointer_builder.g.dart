// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'json_ignore_pointer_builder.dart';

// **************************************************************************
// Generator: JsonWidgetLibraryBuilder
// **************************************************************************

// ignore_for_file: avoid_init_to_null
// ignore_for_file: deprecated_member_use

// ignore_for_file: prefer_const_constructors
// ignore_for_file: prefer_const_constructors_in_immutables
// ignore_for_file: prefer_final_locals
// ignore_for_file: prefer_if_null_operators
// ignore_for_file: prefer_single_quotes
// ignore_for_file: unused_local_variable

class JsonIgnorePointerBuilder extends _JsonIgnorePointerBuilder {
  const JsonIgnorePointerBuilder({required super.args});

  static const kType = 'ignore_pointer';

  /// Constant that can be referenced for the builder's type.
  @override
  String get type => kType;

  /// Static function that is capable of decoding the widget from a dynamic JSON
  /// or YAML set of values.
  static JsonIgnorePointerBuilder fromDynamic(
    dynamic map, {
    JsonWidgetRegistry? registry,
  }) => JsonIgnorePointerBuilder(args: map);

  @override
  JsonIgnorePointerBuilderModel createModel({
    ChildWidgetBuilder? childBuilder,
    required JsonWidgetData data,
  }) {
    final model = JsonIgnorePointerBuilderModel.fromDynamic(
      args,
      registry: data.jsonWidgetRegistry,
    );

    return model;
  }

  @override
  IgnorePointer buildCustom({
    ChildWidgetBuilder? childBuilder,
    required BuildContext context,
    required JsonWidgetData data,
    Key? key,
  }) {
    final model = createModel(childBuilder: childBuilder, data: data);

    return IgnorePointer(
      ignoring: model.ignoring,
      ignoringSemantics: model.ignoringSemantics,
      key: key,
      child: model.child?.build(childBuilder: childBuilder, context: context),
    );
  }
}

class JsonIgnorePointer extends JsonWidgetData {
  JsonIgnorePointer({
    Map<String, dynamic> args = const {},
    JsonWidgetRegistry? registry,
    this.ignoring = true,
    this.ignoringSemantics,
    this.child,
  }) : super(
         jsonWidgetArgs: JsonIgnorePointerBuilderModel.fromDynamic(
           {
             'ignoring': ignoring,
             'ignoringSemantics': ignoringSemantics,
             'child': child,

             ...args,
           },
           args: args,
           registry: registry,
         ),
         jsonWidgetBuilder:
             () => JsonIgnorePointerBuilder(
               args: JsonIgnorePointerBuilderModel.fromDynamic(
                 {
                   'ignoring': ignoring,
                   'ignoringSemantics': ignoringSemantics,
                   'child': child,

                   ...args,
                 },
                 args: args,
                 registry: registry,
               ),
             ),
         jsonWidgetType: JsonIgnorePointerBuilder.kType,
       );

  /* AUTOGENERATED FROM [IgnorePointer.ignoring]*/
  /// Whether this widget is ignored during hit testing.
  ///
  /// Regardless of whether this widget is ignored during hit testing, it will
  /// still consume space during layout and be visible during painting.
  ///
  /// {@macro flutter.widgets.IgnorePointer.semantics}
  ///
  /// Defaults to true.
  final bool ignoring;

  /* AUTOGENERATED FROM [IgnorePointer.ignoringSemantics]*/
  /// Whether the semantics of this widget is ignored when compiling the
  /// semantics subtree.
  ///
  /// {@macro flutter.widgets.IgnorePointer.ignoringSemantics}
  ///
  /// See [SemanticsNode] for additional information about the semantics tree.
  final bool? ignoringSemantics;

  final JsonWidgetData? child;
}

/* AUTOGENERATED FROM [IgnorePointer]*/
/// Creates a widget that is invisible to hit testing.
class JsonIgnorePointerBuilderModel extends JsonWidgetBuilderModel {
  const JsonIgnorePointerBuilderModel(
    super.args, {
    this.ignoring = true,
    this.ignoringSemantics,
    this.child,
  });

  /* AUTOGENERATED FROM [IgnorePointer.ignoring]*/
  /// Whether this widget is ignored during hit testing.
  ///
  /// Regardless of whether this widget is ignored during hit testing, it will
  /// still consume space during layout and be visible during painting.
  ///
  /// {@macro flutter.widgets.IgnorePointer.semantics}
  ///
  /// Defaults to true.
  final bool ignoring;

  /* AUTOGENERATED FROM [IgnorePointer.ignoringSemantics]*/
  /// Whether the semantics of this widget is ignored when compiling the
  /// semantics subtree.
  ///
  /// {@macro flutter.widgets.IgnorePointer.ignoringSemantics}
  ///
  /// See [SemanticsNode] for additional information about the semantics tree.
  final bool? ignoringSemantics;

  final JsonWidgetData? child;

  static JsonIgnorePointerBuilderModel fromDynamic(
    dynamic map, {
    Map<String, dynamic> args = const {},
    JsonWidgetRegistry? registry,
  }) {
    final result = maybeFromDynamic(map, args: args, registry: registry);

    if (result == null) {
      throw Exception(
        '[JsonIgnorePointerBuilder]: requested to parse from dynamic, but the input is null.',
      );
    }

    return result;
  }

  static JsonIgnorePointerBuilderModel? maybeFromDynamic(
    dynamic map, {
    Map<String, dynamic> args = const {},
    JsonWidgetRegistry? registry,
  }) {
    JsonIgnorePointerBuilderModel? result;

    if (map != null) {
      if (map is String) {
        map = yaon.parse(map, normalize: true);
      }

      if (map is JsonIgnorePointerBuilderModel) {
        result = map;
      } else {
        registry ??= JsonWidgetRegistry.instance;
        map = registry.processArgs(map, <String>{}).value;
        result = JsonIgnorePointerBuilderModel(
          args,
          ignoring: JsonClass.parseBool(map['ignoring'], whenNull: true),
          ignoringSemantics: JsonClass.maybeParseBool(map['ignoringSemantics']),
          child: () {
            dynamic parsed = JsonWidgetData.maybeFromDynamic(
              map['child'],
              registry: registry,
            );

            return parsed;
          }(),
        );
      }
    }

    return result;
  }

  @override
  Map<String, dynamic> toJson() {
    return JsonClass.removeNull({
      'ignoring': true == ignoring ? null : ignoring,
      'ignoringSemantics': ignoringSemantics,
      'child': child?.toJson(),

      ...args,
    });
  }
}

class IgnorePointerSchema {
  static const id =
      'https://peiffer-innovations.github.io/flutter_json_schemas/schemas/json_dynamic_widget/ignore_pointer.json';

  static final schema = <String, Object>{
    r'$schema': 'http://json-schema.org/draft-07/schema#',
    r'$id': id,
    'title': 'IgnorePointer',
    'type': 'object',
    'additionalProperties': false,
    'properties': {
      'ignoring': SchemaHelper.boolSchema,
      'ignoringSemantics': SchemaHelper.boolSchema,
      'child': SchemaHelper.objectSchema(JsonWidgetDataSchema.id),
    },
    'required': [],
  };
}
