// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'json_primary_scroll_controller_builder.dart';

// **************************************************************************
// Generator: JsonWidgetLibraryBuilder
// **************************************************************************

// ignore_for_file: avoid_init_to_null
// ignore_for_file: deprecated_member_use
// ignore_for_file: library_private_types_in_public_api
// ignore_for_file: prefer_const_constructors
// ignore_for_file: prefer_const_constructors_in_immutables
// ignore_for_file: prefer_final_locals
// ignore_for_file: prefer_if_null_operators
// ignore_for_file: prefer_single_quotes
// ignore_for_file: unused_local_variable

class JsonPrimaryScrollControllerBuilder
    extends _JsonPrimaryScrollControllerBuilder {
  const JsonPrimaryScrollControllerBuilder({required super.args});

  static const kType = 'primary_scroll_controller';

  /// Constant that can be referenced for the builder's type.
  @override
  String get type => kType;

  /// Static function that is capable of decoding the widget from a dynamic JSON
  /// or YAML set of values.
  static JsonPrimaryScrollControllerBuilder fromDynamic(
    dynamic map, {
    JsonWidgetRegistry? registry,
  }) => JsonPrimaryScrollControllerBuilder(args: map);

  @override
  JsonPrimaryScrollControllerBuilderModel createModel({
    ChildWidgetBuilder? childBuilder,
    required JsonWidgetData data,
  }) {
    final model = JsonPrimaryScrollControllerBuilderModel.fromDynamic(
      args,
      registry: data.jsonWidgetRegistry,
    );

    return model;
  }

  @override
  _PrimaryScrollController buildCustom({
    ChildWidgetBuilder? childBuilder,
    required BuildContext context,
    required JsonWidgetData data,
    Key? key,
  }) {
    final model = createModel(childBuilder: childBuilder, data: data);

    final automaticallyInheritForPlatformsDecoded =
        _decodeAutomaticallyInheritForPlatforms(
          value: model.automaticallyInheritForPlatforms,
        );

    return _PrimaryScrollController(
      automaticallyInheritForPlatforms: automaticallyInheritForPlatformsDecoded,
      childBuilder: childBuilder,
      controller: model.controller,
      scrollDirection: model.scrollDirection,
      child: model.child,
    );
  }
}

class JsonPrimaryScrollController extends JsonWidgetData {
  JsonPrimaryScrollController({
    Map<String, dynamic> args = const {},
    JsonWidgetRegistry? registry,
    required this.automaticallyInheritForPlatforms,
    required this.controller,
    required this.scrollDirection,
    required this.child,
  }) : super(
         jsonWidgetArgs: JsonPrimaryScrollControllerBuilderModel.fromDynamic(
           {
             'automaticallyInheritForPlatforms':
                 automaticallyInheritForPlatforms,
             'controller': controller,
             'scrollDirection': scrollDirection,
             'child': child,

             ...args,
           },
           args: args,
           registry: registry,
         ),
         jsonWidgetBuilder:
             () => JsonPrimaryScrollControllerBuilder(
               args: JsonPrimaryScrollControllerBuilderModel.fromDynamic(
                 {
                   'automaticallyInheritForPlatforms':
                       automaticallyInheritForPlatforms,
                   'controller': controller,
                   'scrollDirection': scrollDirection,
                   'child': child,

                   ...args,
                 },
                 args: args,
                 registry: registry,
               ),
             ),
         jsonWidgetType: JsonPrimaryScrollControllerBuilder.kType,
       );

  /* AUTOGENERATED FROM [_PrimaryScrollController.automaticallyInheritForPlatforms]*/
  /// The [TargetPlatform]s this controller is configured for [ScrollView]s to
  /// automatically inherit.
  ///
  /// Used in conjunction with [scrollDirection]. If the [Axis] provided to
  /// [shouldInherit] is not [scrollDirection], this is ignored.
  ///
  /// When empty, no ScrollView in any Axis will automatically inherit this
  /// controller. Defaults to [TargetPlatformVariant.mobile].
  final dynamic automaticallyInheritForPlatforms;

  /* AUTOGENERATED FROM [_PrimaryScrollController.controller]*/
  /// The [ScrollController] associated with the subtree.
  ///
  /// See also:
  ///
  ///  * [ScrollView.controller], which discusses the purpose of specifying a
  ///    scroll controller.
  final ScrollController? controller;

  /* AUTOGENERATED FROM [_PrimaryScrollController.scrollDirection]*/
  /// The [Axis] this controller is configured for [ScrollView]s to
  /// automatically inherit.
  ///
  /// Used in conjunction with [automaticallyInheritForPlatforms]. If the
  /// current [TargetPlatform] is not included in
  /// [automaticallyInheritForPlatforms], this is ignored.
  ///
  /// When null, no [ScrollView] in any Axis will automatically inherit this
  /// controller. This is dissimilar to [PrimaryScrollController.none]. When a
  /// PrimaryScrollController is inherited, ScrollView will insert
  /// PrimaryScrollController.none into the tree to prevent further descendant
  /// ScrollViews from inheriting the current PrimaryScrollController.
  ///
  /// For the direction in which active scrolling may be occurring, see
  /// [ScrollDirection].
  ///
  /// Defaults to [Axis.vertical].
  final Axis? scrollDirection;

  final JsonWidgetData child;
}

class JsonPrimaryScrollControllerBuilderModel extends JsonWidgetBuilderModel {
  const JsonPrimaryScrollControllerBuilderModel(
    super.args, {
    required this.automaticallyInheritForPlatforms,
    required this.controller,
    required this.scrollDirection,
    required this.child,
  });

  /* AUTOGENERATED FROM [_PrimaryScrollController.automaticallyInheritForPlatforms]*/
  /// The [TargetPlatform]s this controller is configured for [ScrollView]s to
  /// automatically inherit.
  ///
  /// Used in conjunction with [scrollDirection]. If the [Axis] provided to
  /// [shouldInherit] is not [scrollDirection], this is ignored.
  ///
  /// When empty, no ScrollView in any Axis will automatically inherit this
  /// controller. Defaults to [TargetPlatformVariant.mobile].
  final dynamic automaticallyInheritForPlatforms;

  /* AUTOGENERATED FROM [_PrimaryScrollController.controller]*/
  /// The [ScrollController] associated with the subtree.
  ///
  /// See also:
  ///
  ///  * [ScrollView.controller], which discusses the purpose of specifying a
  ///    scroll controller.
  final ScrollController? controller;

  /* AUTOGENERATED FROM [_PrimaryScrollController.scrollDirection]*/
  /// The [Axis] this controller is configured for [ScrollView]s to
  /// automatically inherit.
  ///
  /// Used in conjunction with [automaticallyInheritForPlatforms]. If the
  /// current [TargetPlatform] is not included in
  /// [automaticallyInheritForPlatforms], this is ignored.
  ///
  /// When null, no [ScrollView] in any Axis will automatically inherit this
  /// controller. This is dissimilar to [PrimaryScrollController.none]. When a
  /// PrimaryScrollController is inherited, ScrollView will insert
  /// PrimaryScrollController.none into the tree to prevent further descendant
  /// ScrollViews from inheriting the current PrimaryScrollController.
  ///
  /// For the direction in which active scrolling may be occurring, see
  /// [ScrollDirection].
  ///
  /// Defaults to [Axis.vertical].
  final Axis? scrollDirection;

  final JsonWidgetData child;

  static JsonPrimaryScrollControllerBuilderModel fromDynamic(
    dynamic map, {
    Map<String, dynamic> args = const {},
    JsonWidgetRegistry? registry,
  }) {
    final result = maybeFromDynamic(map, args: args, registry: registry);

    if (result == null) {
      throw Exception(
        '[JsonPrimaryScrollControllerBuilder]: requested to parse from dynamic, but the input is null.',
      );
    }

    return result;
  }

  static JsonPrimaryScrollControllerBuilderModel? maybeFromDynamic(
    dynamic map, {
    Map<String, dynamic> args = const {},
    JsonWidgetRegistry? registry,
  }) {
    JsonPrimaryScrollControllerBuilderModel? result;

    if (map != null) {
      if (map is String) {
        map = yaon.parse(map, normalize: true);
      }

      if (map is JsonPrimaryScrollControllerBuilderModel) {
        result = map;
      } else {
        registry ??= JsonWidgetRegistry.instance;
        map = registry.processArgs(map, <String>{}).value;
        result = JsonPrimaryScrollControllerBuilderModel(
          args,
          automaticallyInheritForPlatforms:
              map['automaticallyInheritForPlatforms'],
          controller: map['controller'],
          scrollDirection: () {
            dynamic parsed = ThemeDecoder.decodeAxis(
              map['scrollDirection'],
              validate: false,
            );

            return parsed;
          }(),
          child: () {
            dynamic parsed = JsonWidgetData.fromDynamic(
              map['child'],
              registry: registry,
            );

            if (parsed == null) {
              throw Exception(
                'Null value encountered for required parameter: [child].',
              );
            }
            return parsed;
          }(),
        );
      }
    }

    return result;
  }

  @override
  Map<String, dynamic> toJson() {
    return JsonClass.removeNull({
      'automaticallyInheritForPlatforms': automaticallyInheritForPlatforms,
      'controller': controller,
      'scrollDirection': ThemeEncoder.encodeAxis(scrollDirection),
      'child': child.toJson(),

      ...args,
    });
  }
}

class PrimaryScrollControllerSchema {
  static const id =
      'https://peiffer-innovations.github.io/flutter_json_schemas/schemas/json_dynamic_widget/primary_scroll_controller.json';

  static final schema = <String, Object>{
    r'$schema': 'http://json-schema.org/draft-07/schema#',
    r'$id': id,
    'title': '_PrimaryScrollController',
    'type': 'object',
    'additionalProperties': false,
    'properties': {
      'automaticallyInheritForPlatforms': SchemaHelper.anySchema,
      'controller': SchemaHelper.anySchema,
      'scrollDirection': SchemaHelper.objectSchema(AxisSchema.id),
      'child': SchemaHelper.objectSchema(JsonWidgetDataSchema.id),
    },
    'required': [
      'automaticallyInheritForPlatforms',
      'controller',
      'scrollDirection',
      'child',
    ],
  };
}
