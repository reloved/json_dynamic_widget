// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'json_safe_area_builder.dart';

// **************************************************************************
// Generator: JsonWidgetLibraryBuilder
// **************************************************************************

// ignore_for_file: avoid_init_to_null
// ignore_for_file: deprecated_member_use

// ignore_for_file: prefer_const_constructors
// ignore_for_file: prefer_const_constructors_in_immutables
// ignore_for_file: prefer_final_locals
// ignore_for_file: prefer_if_null_operators
// ignore_for_file: prefer_single_quotes
// ignore_for_file: unused_local_variable

class JsonSafeAreaBuilder extends _JsonSafeAreaBuilder {
  const JsonSafeAreaBuilder({required super.args});

  static const kType = 'safe_area';

  /// Constant that can be referenced for the builder's type.
  @override
  String get type => kType;

  /// Static function that is capable of decoding the widget from a dynamic JSON
  /// or YAML set of values.
  static JsonSafeAreaBuilder fromDynamic(
    dynamic map, {
    JsonWidgetRegistry? registry,
  }) => JsonSafeAreaBuilder(args: map);

  @override
  JsonSafeAreaBuilderModel createModel({
    ChildWidgetBuilder? childBuilder,
    required JsonWidgetData data,
  }) {
    final model = JsonSafeAreaBuilderModel.fromDynamic(
      args,
      registry: data.jsonWidgetRegistry,
    );

    return model;
  }

  @override
  SafeArea buildCustom({
    ChildWidgetBuilder? childBuilder,
    required BuildContext context,
    required JsonWidgetData data,
    Key? key,
  }) {
    final model = createModel(childBuilder: childBuilder, data: data);

    return SafeArea(
      bottom: model.bottom,
      key: key,
      left: model.left,
      maintainBottomViewPadding: model.maintainBottomViewPadding,
      minimum: model.minimum,
      right: model.right,
      top: model.top,
      child: model.child.build(childBuilder: childBuilder, context: context),
    );
  }
}

class JsonSafeArea extends JsonWidgetData {
  JsonSafeArea({
    Map<String, dynamic> args = const {},
    JsonWidgetRegistry? registry,
    this.bottom = true,
    this.left = true,
    this.maintainBottomViewPadding = false,
    this.minimum = EdgeInsets.zero,
    this.right = true,
    this.top = true,
    required this.child,
  }) : super(
         jsonWidgetArgs: JsonSafeAreaBuilderModel.fromDynamic(
           {
             'bottom': bottom,
             'left': left,
             'maintainBottomViewPadding': maintainBottomViewPadding,
             'minimum': minimum,
             'right': right,
             'top': top,
             'child': child,

             ...args,
           },
           args: args,
           registry: registry,
         ),
         jsonWidgetBuilder:
             () => JsonSafeAreaBuilder(
               args: JsonSafeAreaBuilderModel.fromDynamic(
                 {
                   'bottom': bottom,
                   'left': left,
                   'maintainBottomViewPadding': maintainBottomViewPadding,
                   'minimum': minimum,
                   'right': right,
                   'top': top,
                   'child': child,

                   ...args,
                 },
                 args: args,
                 registry: registry,
               ),
             ),
         jsonWidgetType: JsonSafeAreaBuilder.kType,
       );

  /* AUTOGENERATED FROM [SafeArea.bottom]*/
  /// Whether to avoid system intrusions on the bottom side of the screen.
  final bool bottom;

  /* AUTOGENERATED FROM [SafeArea.left]*/
  /// Whether to avoid system intrusions on the left.
  final bool left;

  /* AUTOGENERATED FROM [SafeArea.maintainBottomViewPadding]*/
  /// Specifies whether the [SafeArea] should maintain the bottom
  /// [MediaQueryData.viewPadding] instead of the bottom [MediaQueryData.padding],
  /// defaults to false.
  ///
  /// For example, if there is an onscreen keyboard displayed above the
  /// SafeArea, the padding can be maintained below the obstruction rather than
  /// being consumed. This can be helpful in cases where your layout contains
  /// flexible widgets, which could visibly move when opening a software
  /// keyboard due to the change in the padding value. Setting this to true will
  /// avoid the UI shift.
  final bool maintainBottomViewPadding;

  /* AUTOGENERATED FROM [SafeArea.minimum]*/
  /// This minimum padding to apply.
  ///
  /// The greater of the minimum insets and the media padding will be applied.
  final EdgeInsets minimum;

  /* AUTOGENERATED FROM [SafeArea.right]*/
  /// Whether to avoid system intrusions on the right.
  final bool right;

  /* AUTOGENERATED FROM [SafeArea.top]*/
  /// Whether to avoid system intrusions at the top of the screen, typically the
  /// system status bar.
  final bool top;

  /* AUTOGENERATED FROM [SafeArea.child]*/
  /// The widget below this widget in the tree.
  ///
  /// The padding on the [MediaQuery] for the [child] will be suitably adjusted
  /// to zero out any sides that were avoided by this widget.
  ///
  /// {@macro flutter.widgets.ProxyWidget.child}
  final JsonWidgetData child;
}

/* AUTOGENERATED FROM [SafeArea]*/
/// Creates a widget that avoids operating system interfaces.
class JsonSafeAreaBuilderModel extends JsonWidgetBuilderModel {
  const JsonSafeAreaBuilderModel(
    super.args, {
    this.bottom = true,
    this.left = true,
    this.maintainBottomViewPadding = false,
    this.minimum = EdgeInsets.zero,
    this.right = true,
    this.top = true,
    required this.child,
  });

  /* AUTOGENERATED FROM [SafeArea.bottom]*/
  /// Whether to avoid system intrusions on the bottom side of the screen.
  final bool bottom;

  /* AUTOGENERATED FROM [SafeArea.left]*/
  /// Whether to avoid system intrusions on the left.
  final bool left;

  /* AUTOGENERATED FROM [SafeArea.maintainBottomViewPadding]*/
  /// Specifies whether the [SafeArea] should maintain the bottom
  /// [MediaQueryData.viewPadding] instead of the bottom [MediaQueryData.padding],
  /// defaults to false.
  ///
  /// For example, if there is an onscreen keyboard displayed above the
  /// SafeArea, the padding can be maintained below the obstruction rather than
  /// being consumed. This can be helpful in cases where your layout contains
  /// flexible widgets, which could visibly move when opening a software
  /// keyboard due to the change in the padding value. Setting this to true will
  /// avoid the UI shift.
  final bool maintainBottomViewPadding;

  /* AUTOGENERATED FROM [SafeArea.minimum]*/
  /// This minimum padding to apply.
  ///
  /// The greater of the minimum insets and the media padding will be applied.
  final EdgeInsets minimum;

  /* AUTOGENERATED FROM [SafeArea.right]*/
  /// Whether to avoid system intrusions on the right.
  final bool right;

  /* AUTOGENERATED FROM [SafeArea.top]*/
  /// Whether to avoid system intrusions at the top of the screen, typically the
  /// system status bar.
  final bool top;

  /* AUTOGENERATED FROM [SafeArea.child]*/
  /// The widget below this widget in the tree.
  ///
  /// The padding on the [MediaQuery] for the [child] will be suitably adjusted
  /// to zero out any sides that were avoided by this widget.
  ///
  /// {@macro flutter.widgets.ProxyWidget.child}
  final JsonWidgetData child;

  static JsonSafeAreaBuilderModel fromDynamic(
    dynamic map, {
    Map<String, dynamic> args = const {},
    JsonWidgetRegistry? registry,
  }) {
    final result = maybeFromDynamic(map, args: args, registry: registry);

    if (result == null) {
      throw Exception(
        '[JsonSafeAreaBuilder]: requested to parse from dynamic, but the input is null.',
      );
    }

    return result;
  }

  static JsonSafeAreaBuilderModel? maybeFromDynamic(
    dynamic map, {
    Map<String, dynamic> args = const {},
    JsonWidgetRegistry? registry,
  }) {
    JsonSafeAreaBuilderModel? result;

    if (map != null) {
      if (map is String) {
        map = yaon.parse(map, normalize: true);
      }

      if (map is JsonSafeAreaBuilderModel) {
        result = map;
      } else {
        registry ??= JsonWidgetRegistry.instance;
        map = registry.processArgs(map, <String>{}).value;
        result = JsonSafeAreaBuilderModel(
          args,
          bottom: JsonClass.parseBool(map['bottom'], whenNull: true),
          left: JsonClass.parseBool(map['left'], whenNull: true),
          maintainBottomViewPadding: JsonClass.parseBool(
            map['maintainBottomViewPadding'],
            whenNull: false,
          ),
          minimum: () {
            dynamic parsed = ThemeDecoder.decodeEdgeInsets(
              map['minimum'],
              validate: false,
            );
            parsed ??= EdgeInsets.zero;

            return parsed;
          }(),
          right: JsonClass.parseBool(map['right'], whenNull: true),
          top: JsonClass.parseBool(map['top'], whenNull: true),
          child: () {
            dynamic parsed = JsonWidgetData.fromDynamic(
              map['child'],
              registry: registry,
            );

            if (parsed == null) {
              throw Exception(
                'Null value encountered for required parameter: [child].',
              );
            }
            return parsed;
          }(),
        );
      }
    }

    return result;
  }

  @override
  Map<String, dynamic> toJson() {
    return JsonClass.removeNull({
      'bottom': true == bottom ? null : bottom,
      'left': true == left ? null : left,
      'maintainBottomViewPadding':
          false == maintainBottomViewPadding ? null : maintainBottomViewPadding,
      'minimum':
          EdgeInsets.zero == minimum
              ? null
              : ThemeEncoder.encodeEdgeInsets(minimum),
      'right': true == right ? null : right,
      'top': true == top ? null : top,
      'child': child.toJson(),

      ...args,
    });
  }
}

class SafeAreaSchema {
  static const id =
      'https://peiffer-innovations.github.io/flutter_json_schemas/schemas/json_dynamic_widget/safe_area.json';

  static final schema = <String, Object>{
    r'$schema': 'http://json-schema.org/draft-07/schema#',
    r'$id': id,
    'title': 'SafeArea',
    'type': 'object',
    'additionalProperties': false,
    'properties': {
      'bottom': SchemaHelper.boolSchema,
      'left': SchemaHelper.boolSchema,
      'maintainBottomViewPadding': SchemaHelper.boolSchema,
      'minimum': SchemaHelper.objectSchema(EdgeInsetsSchema.id),
      'right': SchemaHelper.boolSchema,
      'top': SchemaHelper.boolSchema,
      'child': SchemaHelper.objectSchema(JsonWidgetDataSchema.id),
    },
    'required': ['child'],
  };
}
