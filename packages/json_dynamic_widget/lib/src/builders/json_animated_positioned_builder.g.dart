// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'json_animated_positioned_builder.dart';

// **************************************************************************
// Generator: JsonWidgetLibraryBuilder
// **************************************************************************

// ignore_for_file: avoid_init_to_null
// ignore_for_file: deprecated_member_use

// ignore_for_file: prefer_const_constructors
// ignore_for_file: prefer_const_constructors_in_immutables
// ignore_for_file: prefer_final_locals
// ignore_for_file: prefer_if_null_operators
// ignore_for_file: prefer_single_quotes
// ignore_for_file: unused_local_variable

class JsonAnimatedPositionedBuilder extends _JsonAnimatedPositionedBuilder {
  const JsonAnimatedPositionedBuilder({required super.args});

  static const kType = 'animated_positioned';

  /// Constant that can be referenced for the builder's type.
  @override
  String get type => kType;

  /// Static function that is capable of decoding the widget from a dynamic JSON
  /// or YAML set of values.
  static JsonAnimatedPositionedBuilder fromDynamic(
    dynamic map, {
    JsonWidgetRegistry? registry,
  }) => JsonAnimatedPositionedBuilder(args: map);

  @override
  JsonAnimatedPositionedBuilderModel createModel({
    ChildWidgetBuilder? childBuilder,
    required JsonWidgetData data,
  }) {
    final model = JsonAnimatedPositionedBuilderModel.fromDynamic(
      args,
      registry: data.jsonWidgetRegistry,
    );

    return model;
  }

  @override
  AnimatedPositioned buildCustom({
    ChildWidgetBuilder? childBuilder,
    required BuildContext context,
    required JsonWidgetData data,
    Key? key,
  }) {
    final model = createModel(childBuilder: childBuilder, data: data);

    return AnimatedPositioned(
      bottom: model.bottom,
      curve: model.curve,
      duration: model.duration,
      height: model.height,
      key: key,
      left: model.left,
      onEnd: model.onEnd,
      right: model.right,
      top: model.top,
      width: model.width,
      child: model.child.build(childBuilder: childBuilder, context: context),
    );
  }
}

class JsonAnimatedPositioned extends JsonWidgetData {
  JsonAnimatedPositioned({
    Map<String, dynamic> args = const {},
    JsonWidgetRegistry? registry,
    this.bottom,
    this.curve = Curves.linear,
    required this.duration,
    this.height,
    this.left,
    this.onEnd,
    this.right,
    this.top,
    this.width,
    required this.child,
  }) : super(
         jsonWidgetArgs: JsonAnimatedPositionedBuilderModel.fromDynamic(
           {
             'bottom': bottom,
             'curve': curve,
             'duration': duration,
             'height': height,
             'left': left,
             'onEnd': onEnd,
             'right': right,
             'top': top,
             'width': width,
             'child': child,

             ...args,
           },
           args: args,
           registry: registry,
         ),
         jsonWidgetBuilder:
             () => JsonAnimatedPositionedBuilder(
               args: JsonAnimatedPositionedBuilderModel.fromDynamic(
                 {
                   'bottom': bottom,
                   'curve': curve,
                   'duration': duration,
                   'height': height,
                   'left': left,
                   'onEnd': onEnd,
                   'right': right,
                   'top': top,
                   'width': width,
                   'child': child,

                   ...args,
                 },
                 args: args,
                 registry: registry,
               ),
             ),
         jsonWidgetType: JsonAnimatedPositionedBuilder.kType,
       );

  /* AUTOGENERATED FROM [AnimatedPositioned.bottom]*/
  /// The offset of the child's bottom edge from the bottom of the stack.
  final double? bottom;

  final Curve curve;

  final Duration duration;

  /* AUTOGENERATED FROM [AnimatedPositioned.height]*/
  /// The child's height.
  ///
  /// Only two out of the three vertical values ([top], [bottom], [height]) can
  /// be set. The third must be null.
  final double? height;

  /* AUTOGENERATED FROM [AnimatedPositioned.left]*/
  /// The offset of the child's left edge from the left of the stack.
  final double? left;

  final void Function()? onEnd;

  /* AUTOGENERATED FROM [AnimatedPositioned.right]*/
  /// The offset of the child's right edge from the right of the stack.
  final double? right;

  /* AUTOGENERATED FROM [AnimatedPositioned.top]*/
  /// The offset of the child's top edge from the top of the stack.
  final double? top;

  /* AUTOGENERATED FROM [AnimatedPositioned.width]*/
  /// The child's width.
  ///
  /// Only two out of the three horizontal values ([left], [right], [width]) can
  /// be set. The third must be null.
  final double? width;

  /* AUTOGENERATED FROM [AnimatedPositioned.child]*/
  /// The widget below this widget in the tree.
  ///
  /// {@macro flutter.widgets.ProxyWidget.child}
  final JsonWidgetData child;
}

/* AUTOGENERATED FROM [AnimatedPositioned]*/
/// Creates a widget that animates its position implicitly.
///
/// Only two out of the three horizontal values ([left], [right],
/// [width]), and only two out of the three vertical values ([top],
/// [bottom], [height]), can be set. In each case, at least one of
/// the three must be null.
class JsonAnimatedPositionedBuilderModel extends JsonWidgetBuilderModel {
  const JsonAnimatedPositionedBuilderModel(
    super.args, {
    this.bottom,
    this.curve = Curves.linear,
    required this.duration,
    this.height,
    this.left,
    this.onEnd,
    this.right,
    this.top,
    this.width,
    required this.child,
  });

  /* AUTOGENERATED FROM [AnimatedPositioned.bottom]*/
  /// The offset of the child's bottom edge from the bottom of the stack.
  final double? bottom;

  final Curve curve;

  final Duration duration;

  /* AUTOGENERATED FROM [AnimatedPositioned.height]*/
  /// The child's height.
  ///
  /// Only two out of the three vertical values ([top], [bottom], [height]) can
  /// be set. The third must be null.
  final double? height;

  /* AUTOGENERATED FROM [AnimatedPositioned.left]*/
  /// The offset of the child's left edge from the left of the stack.
  final double? left;

  final void Function()? onEnd;

  /* AUTOGENERATED FROM [AnimatedPositioned.right]*/
  /// The offset of the child's right edge from the right of the stack.
  final double? right;

  /* AUTOGENERATED FROM [AnimatedPositioned.top]*/
  /// The offset of the child's top edge from the top of the stack.
  final double? top;

  /* AUTOGENERATED FROM [AnimatedPositioned.width]*/
  /// The child's width.
  ///
  /// Only two out of the three horizontal values ([left], [right], [width]) can
  /// be set. The third must be null.
  final double? width;

  /* AUTOGENERATED FROM [AnimatedPositioned.child]*/
  /// The widget below this widget in the tree.
  ///
  /// {@macro flutter.widgets.ProxyWidget.child}
  final JsonWidgetData child;

  static JsonAnimatedPositionedBuilderModel fromDynamic(
    dynamic map, {
    Map<String, dynamic> args = const {},
    JsonWidgetRegistry? registry,
  }) {
    final result = maybeFromDynamic(map, args: args, registry: registry);

    if (result == null) {
      throw Exception(
        '[JsonAnimatedPositionedBuilder]: requested to parse from dynamic, but the input is null.',
      );
    }

    return result;
  }

  static JsonAnimatedPositionedBuilderModel? maybeFromDynamic(
    dynamic map, {
    Map<String, dynamic> args = const {},
    JsonWidgetRegistry? registry,
  }) {
    JsonAnimatedPositionedBuilderModel? result;

    if (map != null) {
      if (map is String) {
        map = yaon.parse(map, normalize: true);
      }

      if (map is JsonAnimatedPositionedBuilderModel) {
        result = map;
      } else {
        registry ??= JsonWidgetRegistry.instance;
        map = registry.processArgs(map, <String>{}).value;
        result = JsonAnimatedPositionedBuilderModel(
          args,
          bottom: () {
            dynamic parsed = JsonClass.maybeParseDouble(map['bottom']);

            return parsed;
          }(),
          curve: () {
            dynamic parsed = CurvesValues.lookup(map['curve']);

            parsed ??= Curves.linear;

            return parsed;
          }(),
          duration: () {
            dynamic parsed = JsonClass.parseDurationFromMillis(map['duration']);

            if (parsed == null) {
              throw Exception(
                'Null value encountered for required parameter: [duration].',
              );
            }
            return parsed;
          }(),
          height: () {
            dynamic parsed = JsonClass.maybeParseDouble(map['height']);

            return parsed;
          }(),
          left: () {
            dynamic parsed = JsonClass.maybeParseDouble(map['left']);

            return parsed;
          }(),
          onEnd: map['onEnd'],
          right: () {
            dynamic parsed = JsonClass.maybeParseDouble(map['right']);

            return parsed;
          }(),
          top: () {
            dynamic parsed = JsonClass.maybeParseDouble(map['top']);

            return parsed;
          }(),
          width: () {
            dynamic parsed = JsonClass.maybeParseDouble(map['width']);

            return parsed;
          }(),
          child: () {
            dynamic parsed = JsonWidgetData.fromDynamic(
              map['child'],
              registry: registry,
            );

            if (parsed == null) {
              throw Exception(
                'Null value encountered for required parameter: [child].',
              );
            }
            return parsed;
          }(),
        );
      }
    }

    return result;
  }

  @override
  Map<String, dynamic> toJson() {
    return JsonClass.removeNull({
      'bottom': bottom,
      'curve': Curves.linear == curve ? null : CurvesValues.encode(curve),
      'duration': duration.inMilliseconds,
      'height': height,
      'left': left,
      'onEnd': onEnd,
      'right': right,
      'top': top,
      'width': width,
      'child': child.toJson(),

      ...args,
    });
  }
}

class AnimatedPositionedSchema {
  static const id =
      'https://peiffer-innovations.github.io/flutter_json_schemas/schemas/json_dynamic_widget/animated_positioned.json';

  static final schema = <String, Object>{
    r'$schema': 'http://json-schema.org/draft-07/schema#',
    r'$id': id,
    'title': 'AnimatedPositioned',
    'type': 'object',
    'additionalProperties': false,
    'properties': {
      'bottom': SchemaHelper.numberSchema,
      'curve': SchemaHelper.anySchema,
      'duration': SchemaHelper.anySchema,
      'height': SchemaHelper.numberSchema,
      'left': SchemaHelper.numberSchema,
      'onEnd': SchemaHelper.anySchema,
      'right': SchemaHelper.numberSchema,
      'top': SchemaHelper.numberSchema,
      'width': SchemaHelper.numberSchema,
      'child': SchemaHelper.objectSchema(JsonWidgetDataSchema.id),
    },
    'required': ['duration', 'child'],
  };
}
