// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'json_placeholder_builder.dart';

// **************************************************************************
// Generator: JsonWidgetLibraryBuilder
// **************************************************************************

// ignore_for_file: avoid_init_to_null
// ignore_for_file: deprecated_member_use

// ignore_for_file: prefer_const_constructors
// ignore_for_file: prefer_const_constructors_in_immutables
// ignore_for_file: prefer_final_locals
// ignore_for_file: prefer_if_null_operators
// ignore_for_file: prefer_single_quotes
// ignore_for_file: unused_local_variable

class JsonPlaceholderBuilder extends _JsonPlaceholderBuilder {
  const JsonPlaceholderBuilder({required super.args});

  static const kType = 'placeholder';

  /// Constant that can be referenced for the builder's type.
  @override
  String get type => kType;

  /// Static function that is capable of decoding the widget from a dynamic JSON
  /// or YAML set of values.
  static JsonPlaceholderBuilder fromDynamic(
    dynamic map, {
    JsonWidgetRegistry? registry,
  }) => JsonPlaceholderBuilder(args: map);

  @override
  JsonPlaceholderBuilderModel createModel({
    ChildWidgetBuilder? childBuilder,
    required JsonWidgetData data,
  }) {
    final model = JsonPlaceholderBuilderModel.fromDynamic(
      args,
      registry: data.jsonWidgetRegistry,
    );

    return model;
  }

  @override
  Placeholder buildCustom({
    ChildWidgetBuilder? childBuilder,
    required BuildContext context,
    required JsonWidgetData data,
    Key? key,
  }) {
    final model = createModel(childBuilder: childBuilder, data: data);

    return Placeholder(
      color: model.color,
      fallbackHeight: model.fallbackHeight,
      fallbackWidth: model.fallbackWidth,
      key: key,
      strokeWidth: model.strokeWidth,
      child: model.child?.build(childBuilder: childBuilder, context: context),
    );
  }
}

class JsonPlaceholder extends JsonWidgetData {
  JsonPlaceholder({
    Map<String, dynamic> args = const {},
    JsonWidgetRegistry? registry,
    this.color = const Color(0xFF455A64),
    this.fallbackHeight = 400.0,
    this.fallbackWidth = 400.0,
    this.strokeWidth = 2.0,
    this.child,
  }) : super(
         jsonWidgetArgs: JsonPlaceholderBuilderModel.fromDynamic(
           {
             'color': color,
             'fallbackHeight': fallbackHeight,
             'fallbackWidth': fallbackWidth,
             'strokeWidth': strokeWidth,
             'child': child,

             ...args,
           },
           args: args,
           registry: registry,
         ),
         jsonWidgetBuilder:
             () => JsonPlaceholderBuilder(
               args: JsonPlaceholderBuilderModel.fromDynamic(
                 {
                   'color': color,
                   'fallbackHeight': fallbackHeight,
                   'fallbackWidth': fallbackWidth,
                   'strokeWidth': strokeWidth,
                   'child': child,

                   ...args,
                 },
                 args: args,
                 registry: registry,
               ),
             ),
         jsonWidgetType: JsonPlaceholderBuilder.kType,
       );

  /* AUTOGENERATED FROM [Placeholder.color]*/
  /// The color to draw the placeholder box.
  final Color color;

  /* AUTOGENERATED FROM [Placeholder.fallbackHeight]*/
  /// The height to use when the placeholder is in a situation with an unbounded
  /// height.
  ///
  /// See also:
  ///
  ///  * [fallbackWidth], the same but horizontally.
  final double fallbackHeight;

  /* AUTOGENERATED FROM [Placeholder.fallbackWidth]*/
  /// The width to use when the placeholder is in a situation with an unbounded
  /// width.
  ///
  /// See also:
  ///
  ///  * [fallbackHeight], the same but vertically.
  final double fallbackWidth;

  /* AUTOGENERATED FROM [Placeholder.strokeWidth]*/
  /// The width of the lines in the placeholder box.
  final double strokeWidth;

  /* AUTOGENERATED FROM [Placeholder.child]*/
  /// The [child] contained by the placeholder box.
  ///
  /// Defaults to null.
  final JsonWidgetData? child;
}

/* AUTOGENERATED FROM [Placeholder]*/
/// Creates a widget which draws a box.
class JsonPlaceholderBuilderModel extends JsonWidgetBuilderModel {
  const JsonPlaceholderBuilderModel(
    super.args, {
    this.color = const Color(0xFF455A64),
    this.fallbackHeight = 400.0,
    this.fallbackWidth = 400.0,
    this.strokeWidth = 2.0,
    this.child,
  });

  /* AUTOGENERATED FROM [Placeholder.color]*/
  /// The color to draw the placeholder box.
  final Color color;

  /* AUTOGENERATED FROM [Placeholder.fallbackHeight]*/
  /// The height to use when the placeholder is in a situation with an unbounded
  /// height.
  ///
  /// See also:
  ///
  ///  * [fallbackWidth], the same but horizontally.
  final double fallbackHeight;

  /* AUTOGENERATED FROM [Placeholder.fallbackWidth]*/
  /// The width to use when the placeholder is in a situation with an unbounded
  /// width.
  ///
  /// See also:
  ///
  ///  * [fallbackHeight], the same but vertically.
  final double fallbackWidth;

  /* AUTOGENERATED FROM [Placeholder.strokeWidth]*/
  /// The width of the lines in the placeholder box.
  final double strokeWidth;

  /* AUTOGENERATED FROM [Placeholder.child]*/
  /// The [child] contained by the placeholder box.
  ///
  /// Defaults to null.
  final JsonWidgetData? child;

  static JsonPlaceholderBuilderModel fromDynamic(
    dynamic map, {
    Map<String, dynamic> args = const {},
    JsonWidgetRegistry? registry,
  }) {
    final result = maybeFromDynamic(map, args: args, registry: registry);

    if (result == null) {
      throw Exception(
        '[JsonPlaceholderBuilder]: requested to parse from dynamic, but the input is null.',
      );
    }

    return result;
  }

  static JsonPlaceholderBuilderModel? maybeFromDynamic(
    dynamic map, {
    Map<String, dynamic> args = const {},
    JsonWidgetRegistry? registry,
  }) {
    JsonPlaceholderBuilderModel? result;

    if (map != null) {
      if (map is String) {
        map = yaon.parse(map, normalize: true);
      }

      if (map is JsonPlaceholderBuilderModel) {
        result = map;
      } else {
        registry ??= JsonWidgetRegistry.instance;
        map = registry.processArgs(map, <String>{}).value;
        result = JsonPlaceholderBuilderModel(
          args,
          color: () {
            dynamic parsed = ThemeDecoder.decodeColor(
              map['color'],
              validate: false,
            );
            parsed ??= const Color(0xFF455A64);

            return parsed;
          }(),
          fallbackHeight: () {
            dynamic parsed = JsonClass.maybeParseDouble(map['fallbackHeight']);

            parsed ??= 400.0;

            return parsed;
          }(),
          fallbackWidth: () {
            dynamic parsed = JsonClass.maybeParseDouble(map['fallbackWidth']);

            parsed ??= 400.0;

            return parsed;
          }(),
          strokeWidth: () {
            dynamic parsed = JsonClass.maybeParseDouble(map['strokeWidth']);

            parsed ??= 2.0;

            return parsed;
          }(),
          child: () {
            dynamic parsed = JsonWidgetData.maybeFromDynamic(
              map['child'],
              registry: registry,
            );

            return parsed;
          }(),
        );
      }
    }

    return result;
  }

  @override
  Map<String, dynamic> toJson() {
    return JsonClass.removeNull({
      'color':
          const Color(0xFF455A64) == color
              ? null
              : ThemeEncoder.encodeColor(color),
      'fallbackHeight': 400.0 == fallbackHeight ? null : fallbackHeight,
      'fallbackWidth': 400.0 == fallbackWidth ? null : fallbackWidth,
      'strokeWidth': 2.0 == strokeWidth ? null : strokeWidth,
      'child': child?.toJson(),

      ...args,
    });
  }
}

class PlaceholderSchema {
  static const id =
      'https://peiffer-innovations.github.io/flutter_json_schemas/schemas/json_dynamic_widget/placeholder.json';

  static final schema = <String, Object>{
    r'$schema': 'http://json-schema.org/draft-07/schema#',
    r'$id': id,
    'title': 'Placeholder',
    'type': 'object',
    'additionalProperties': false,
    'properties': {
      'color': SchemaHelper.objectSchema(ColorSchema.id),
      'fallbackHeight': SchemaHelper.numberSchema,
      'fallbackWidth': SchemaHelper.numberSchema,
      'strokeWidth': SchemaHelper.numberSchema,
      'child': SchemaHelper.objectSchema(JsonWidgetDataSchema.id),
    },
    'required': [],
  };
}
