// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'json_linear_progress_indicator_builder.dart';

// **************************************************************************
// Generator: JsonWidgetLibraryBuilder
// **************************************************************************

// ignore_for_file: avoid_init_to_null
// ignore_for_file: deprecated_member_use

// ignore_for_file: prefer_const_constructors
// ignore_for_file: prefer_const_constructors_in_immutables
// ignore_for_file: prefer_final_locals
// ignore_for_file: prefer_if_null_operators
// ignore_for_file: prefer_single_quotes
// ignore_for_file: unused_local_variable

class JsonLinearProgressIndicatorBuilder
    extends _JsonLinearProgressIndicatorBuilder {
  const JsonLinearProgressIndicatorBuilder({required super.args});

  static const kType = 'linear_progress_indicator';

  /// Constant that can be referenced for the builder's type.
  @override
  String get type => kType;

  /// Static function that is capable of decoding the widget from a dynamic JSON
  /// or YAML set of values.
  static JsonLinearProgressIndicatorBuilder fromDynamic(
    dynamic map, {
    JsonWidgetRegistry? registry,
  }) => JsonLinearProgressIndicatorBuilder(args: map);

  @override
  JsonLinearProgressIndicatorBuilderModel createModel({
    ChildWidgetBuilder? childBuilder,
    required JsonWidgetData data,
  }) {
    final model = JsonLinearProgressIndicatorBuilderModel.fromDynamic(
      args,
      registry: data.jsonWidgetRegistry,
    );

    return model;
  }

  @override
  LinearProgressIndicator buildCustom({
    ChildWidgetBuilder? childBuilder,
    required BuildContext context,
    required JsonWidgetData data,
    Key? key,
  }) {
    final model = createModel(childBuilder: childBuilder, data: data);

    final valueColorDecoded = _decodeValueColor(value: model.valueColor);

    return LinearProgressIndicator(
      backgroundColor: model.backgroundColor,
      borderRadius: model.borderRadius,
      color: model.color,
      key: key,
      minHeight: model.minHeight,
      semanticsLabel: model.semanticsLabel,
      semanticsValue: model.semanticsValue,
      stopIndicatorColor: model.stopIndicatorColor,
      stopIndicatorRadius: model.stopIndicatorRadius,
      trackGap: model.trackGap,
      value: model.value,
      valueColor: valueColorDecoded,
      year2023: model.year2023,
    );
  }
}

class JsonLinearProgressIndicator extends JsonWidgetData {
  JsonLinearProgressIndicator({
    Map<String, dynamic> args = const {},
    JsonWidgetRegistry? registry,
    this.backgroundColor,
    this.borderRadius,
    this.color,
    this.minHeight,
    this.semanticsLabel,
    this.semanticsValue,
    this.stopIndicatorColor,
    this.stopIndicatorRadius,
    this.trackGap,
    this.value,
    required this.valueColor,
    this.year2023,
  }) : super(
         jsonWidgetArgs: JsonLinearProgressIndicatorBuilderModel.fromDynamic(
           {
             'backgroundColor': backgroundColor,
             'borderRadius': borderRadius,
             'color': color,
             'minHeight': minHeight,
             'semanticsLabel': semanticsLabel,
             'semanticsValue': semanticsValue,
             'stopIndicatorColor': stopIndicatorColor,
             'stopIndicatorRadius': stopIndicatorRadius,
             'trackGap': trackGap,
             'value': value,
             'valueColor': valueColor,
             'year2023': year2023,

             ...args,
           },
           args: args,
           registry: registry,
         ),
         jsonWidgetBuilder:
             () => JsonLinearProgressIndicatorBuilder(
               args: JsonLinearProgressIndicatorBuilderModel.fromDynamic(
                 {
                   'backgroundColor': backgroundColor,
                   'borderRadius': borderRadius,
                   'color': color,
                   'minHeight': minHeight,
                   'semanticsLabel': semanticsLabel,
                   'semanticsValue': semanticsValue,
                   'stopIndicatorColor': stopIndicatorColor,
                   'stopIndicatorRadius': stopIndicatorRadius,
                   'trackGap': trackGap,
                   'value': value,
                   'valueColor': valueColor,
                   'year2023': year2023,

                   ...args,
                 },
                 args: args,
                 registry: registry,
               ),
             ),
         jsonWidgetType: JsonLinearProgressIndicatorBuilder.kType,
       );

  final Color? backgroundColor;

  /* AUTOGENERATED FROM [LinearProgressIndicator.borderRadius]*/
  /// The border radius of both the indicator and the track.
  ///
  /// If null, then the [ProgressIndicatorThemeData.borderRadius] will be used.
  /// If that is also null, then defaults to radius of 2, which produces a
  /// rounded shape with a rounded indicator. If [ThemeData.useMaterial3] is false,
  /// then defaults to [BorderRadius.zero], which produces a rectangular shape
  /// with a rectangular indicator.
  final BorderRadiusGeometry? borderRadius;

  final Color? color;

  /* AUTOGENERATED FROM [LinearProgressIndicator.minHeight]*/
  /// {@template flutter.material.LinearProgressIndicator.minHeight}
  /// The minimum height of the line used to draw the linear indicator.
  ///
  /// If [LinearProgressIndicator.minHeight] is null then it will use the
  /// ambient [ProgressIndicatorThemeData.linearMinHeight]. If that is null
  /// it will use 4dp.
  /// {@endtemplate}
  final double? minHeight;

  final String? semanticsLabel;

  final String? semanticsValue;

  /* AUTOGENERATED FROM [LinearProgressIndicator.stopIndicatorColor]*/
  /// The color of the stop indicator.
  ///
  /// If [year2023] is false or [ThemeData.useMaterial3] is false, then no stop
  /// indicator will be drawn.
  ///
  /// If null, then the [ProgressIndicatorThemeData.stopIndicatorColor] will be used.
  /// If that is null, then the [ColorScheme.primary] will be used.
  final Color? stopIndicatorColor;

  /* AUTOGENERATED FROM [LinearProgressIndicator.stopIndicatorRadius]*/
  /// The radius of the stop indicator.
  ///
  /// If [year2023] is false or [ThemeData.useMaterial3] is false, then no stop
  /// indicator will be drawn.
  ///
  /// Set [stopIndicatorRadius] to 0 to hide the stop indicator.
  ///
  /// If null, then the [ProgressIndicatorThemeData.stopIndicatorRadius] will be used.
  /// If that is null, then defaults to 2.
  final double? stopIndicatorRadius;

  /* AUTOGENERATED FROM [LinearProgressIndicator.trackGap]*/
  /// The gap between the indicator and the track.
  ///
  /// If [year2023] is false or [ThemeData.useMaterial3] is false, then no track
  /// gap will be drawn.
  ///
  /// Set [trackGap] to 0 to hide the track gap.
  ///
  /// If null, then the [ProgressIndicatorThemeData.trackGap] will be used.
  /// If that is null, then defaults to 4.
  final double? trackGap;

  final double? value;

  final dynamic valueColor;

  /* AUTOGENERATED FROM [LinearProgressIndicator.year2023]*/
  /// When true, the [LinearProgressIndicator] will use the 2023 Material Design 3
  /// appearance.
  ///
  /// If null, then the [ProgressIndicatorThemeData.year2023] will be used.
  /// If that is null, then defaults to true.
  ///
  /// If this is set to false, the [LinearProgressIndicator] will use the
  /// latest Material Design 3 appearance, which was introduced in December 2023.
  ///
  /// If [ThemeData.useMaterial3] is false, then this property is ignored.
  final bool? year2023;
}

/* AUTOGENERATED FROM [LinearProgressIndicator]*/
/// Creates a linear progress indicator.
///
/// {@macro flutter.material.ProgressIndicator.ProgressIndicator}
class JsonLinearProgressIndicatorBuilderModel extends JsonWidgetBuilderModel {
  const JsonLinearProgressIndicatorBuilderModel(
    super.args, {
    this.backgroundColor,
    this.borderRadius,
    this.color,
    this.minHeight,
    this.semanticsLabel,
    this.semanticsValue,
    this.stopIndicatorColor,
    this.stopIndicatorRadius,
    this.trackGap,
    this.value,
    required this.valueColor,
    this.year2023,
  });

  final Color? backgroundColor;

  /* AUTOGENERATED FROM [LinearProgressIndicator.borderRadius]*/
  /// The border radius of both the indicator and the track.
  ///
  /// If null, then the [ProgressIndicatorThemeData.borderRadius] will be used.
  /// If that is also null, then defaults to radius of 2, which produces a
  /// rounded shape with a rounded indicator. If [ThemeData.useMaterial3] is false,
  /// then defaults to [BorderRadius.zero], which produces a rectangular shape
  /// with a rectangular indicator.
  final BorderRadiusGeometry? borderRadius;

  final Color? color;

  /* AUTOGENERATED FROM [LinearProgressIndicator.minHeight]*/
  /// {@template flutter.material.LinearProgressIndicator.minHeight}
  /// The minimum height of the line used to draw the linear indicator.
  ///
  /// If [LinearProgressIndicator.minHeight] is null then it will use the
  /// ambient [ProgressIndicatorThemeData.linearMinHeight]. If that is null
  /// it will use 4dp.
  /// {@endtemplate}
  final double? minHeight;

  final String? semanticsLabel;

  final String? semanticsValue;

  /* AUTOGENERATED FROM [LinearProgressIndicator.stopIndicatorColor]*/
  /// The color of the stop indicator.
  ///
  /// If [year2023] is false or [ThemeData.useMaterial3] is false, then no stop
  /// indicator will be drawn.
  ///
  /// If null, then the [ProgressIndicatorThemeData.stopIndicatorColor] will be used.
  /// If that is null, then the [ColorScheme.primary] will be used.
  final Color? stopIndicatorColor;

  /* AUTOGENERATED FROM [LinearProgressIndicator.stopIndicatorRadius]*/
  /// The radius of the stop indicator.
  ///
  /// If [year2023] is false or [ThemeData.useMaterial3] is false, then no stop
  /// indicator will be drawn.
  ///
  /// Set [stopIndicatorRadius] to 0 to hide the stop indicator.
  ///
  /// If null, then the [ProgressIndicatorThemeData.stopIndicatorRadius] will be used.
  /// If that is null, then defaults to 2.
  final double? stopIndicatorRadius;

  /* AUTOGENERATED FROM [LinearProgressIndicator.trackGap]*/
  /// The gap between the indicator and the track.
  ///
  /// If [year2023] is false or [ThemeData.useMaterial3] is false, then no track
  /// gap will be drawn.
  ///
  /// Set [trackGap] to 0 to hide the track gap.
  ///
  /// If null, then the [ProgressIndicatorThemeData.trackGap] will be used.
  /// If that is null, then defaults to 4.
  final double? trackGap;

  final double? value;

  final dynamic valueColor;

  /* AUTOGENERATED FROM [LinearProgressIndicator.year2023]*/
  /// When true, the [LinearProgressIndicator] will use the 2023 Material Design 3
  /// appearance.
  ///
  /// If null, then the [ProgressIndicatorThemeData.year2023] will be used.
  /// If that is null, then defaults to true.
  ///
  /// If this is set to false, the [LinearProgressIndicator] will use the
  /// latest Material Design 3 appearance, which was introduced in December 2023.
  ///
  /// If [ThemeData.useMaterial3] is false, then this property is ignored.
  final bool? year2023;

  static JsonLinearProgressIndicatorBuilderModel fromDynamic(
    dynamic map, {
    Map<String, dynamic> args = const {},
    JsonWidgetRegistry? registry,
  }) {
    final result = maybeFromDynamic(map, args: args, registry: registry);

    if (result == null) {
      throw Exception(
        '[JsonLinearProgressIndicatorBuilder]: requested to parse from dynamic, but the input is null.',
      );
    }

    return result;
  }

  static JsonLinearProgressIndicatorBuilderModel? maybeFromDynamic(
    dynamic map, {
    Map<String, dynamic> args = const {},
    JsonWidgetRegistry? registry,
  }) {
    JsonLinearProgressIndicatorBuilderModel? result;

    if (map != null) {
      if (map is String) {
        map = yaon.parse(map, normalize: true);
      }

      if (map is JsonLinearProgressIndicatorBuilderModel) {
        result = map;
      } else {
        registry ??= JsonWidgetRegistry.instance;
        map = registry.processArgs(map, <String>{}).value;
        result = JsonLinearProgressIndicatorBuilderModel(
          args,
          backgroundColor: () {
            dynamic parsed = ThemeDecoder.decodeColor(
              map['backgroundColor'],
              validate: false,
            );

            return parsed;
          }(),
          borderRadius: () {
            dynamic parsed = ThemeDecoder.decodeBorderRadiusGeometry(
              map['borderRadius'],
              validate: false,
            );

            return parsed;
          }(),
          color: () {
            dynamic parsed = ThemeDecoder.decodeColor(
              map['color'],
              validate: false,
            );

            return parsed;
          }(),
          minHeight: () {
            dynamic parsed = JsonClass.maybeParseDouble(map['minHeight']);

            return parsed;
          }(),
          semanticsLabel: map['semanticsLabel'],
          semanticsValue: map['semanticsValue'],
          stopIndicatorColor: () {
            dynamic parsed = ThemeDecoder.decodeColor(
              map['stopIndicatorColor'],
              validate: false,
            );

            return parsed;
          }(),
          stopIndicatorRadius: () {
            dynamic parsed = JsonClass.maybeParseDouble(
              map['stopIndicatorRadius'],
            );

            return parsed;
          }(),
          trackGap: () {
            dynamic parsed = JsonClass.maybeParseDouble(map['trackGap']);

            return parsed;
          }(),
          value: () {
            dynamic parsed = JsonClass.maybeParseDouble(map['value']);

            return parsed;
          }(),
          valueColor: map['valueColor'],
          year2023: JsonClass.maybeParseBool(map['year2023']),
        );
      }
    }

    return result;
  }

  @override
  Map<String, dynamic> toJson() {
    return JsonClass.removeNull({
      'backgroundColor': ThemeEncoder.encodeColor(backgroundColor),
      'borderRadius': borderRadius,
      'color': ThemeEncoder.encodeColor(color),
      'minHeight': minHeight,
      'semanticsLabel': semanticsLabel,
      'semanticsValue': semanticsValue,
      'stopIndicatorColor': ThemeEncoder.encodeColor(stopIndicatorColor),
      'stopIndicatorRadius': stopIndicatorRadius,
      'trackGap': trackGap,
      'value': value,
      'valueColor': valueColor,
      'year2023': year2023,

      ...args,
    });
  }
}

class LinearProgressIndicatorSchema {
  static const id =
      'https://peiffer-innovations.github.io/flutter_json_schemas/schemas/json_dynamic_widget/linear_progress_indicator.json';

  static final schema = <String, Object>{
    r'$schema': 'http://json-schema.org/draft-07/schema#',
    r'$id': id,
    'title': 'LinearProgressIndicator',
    'type': 'object',
    'additionalProperties': false,
    'properties': {
      'backgroundColor': SchemaHelper.objectSchema(ColorSchema.id),
      'borderRadius': SchemaHelper.objectSchema(BorderRadiusGeometrySchema.id),
      'color': SchemaHelper.objectSchema(ColorSchema.id),
      'minHeight': SchemaHelper.numberSchema,
      'semanticsLabel': SchemaHelper.stringSchema,
      'semanticsValue': SchemaHelper.stringSchema,
      'stopIndicatorColor': SchemaHelper.objectSchema(ColorSchema.id),
      'stopIndicatorRadius': SchemaHelper.numberSchema,
      'trackGap': SchemaHelper.numberSchema,
      'value': SchemaHelper.numberSchema,
      'valueColor': SchemaHelper.anySchema,
      'year2023': SchemaHelper.boolSchema,
    },
    'required': [],
  };
}
