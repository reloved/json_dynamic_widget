// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'json_overflow_box_builder.dart';

// **************************************************************************
// Generator: JsonWidgetLibraryBuilder
// **************************************************************************

// ignore_for_file: avoid_init_to_null
// ignore_for_file: deprecated_member_use

// ignore_for_file: prefer_const_constructors
// ignore_for_file: prefer_const_constructors_in_immutables
// ignore_for_file: prefer_final_locals
// ignore_for_file: prefer_if_null_operators
// ignore_for_file: prefer_single_quotes
// ignore_for_file: unused_local_variable

class JsonOverflowBoxBuilder extends _JsonOverflowBoxBuilder {
  const JsonOverflowBoxBuilder({required super.args});

  static const kType = 'overflow_box';

  /// Constant that can be referenced for the builder's type.
  @override
  String get type => kType;

  /// Static function that is capable of decoding the widget from a dynamic JSON
  /// or YAML set of values.
  static JsonOverflowBoxBuilder fromDynamic(
    dynamic map, {
    JsonWidgetRegistry? registry,
  }) => JsonOverflowBoxBuilder(args: map);

  @override
  JsonOverflowBoxBuilderModel createModel({
    ChildWidgetBuilder? childBuilder,
    required JsonWidgetData data,
  }) {
    final model = JsonOverflowBoxBuilderModel.fromDynamic(
      args,
      registry: data.jsonWidgetRegistry,
    );

    return model;
  }

  @override
  OverflowBox buildCustom({
    ChildWidgetBuilder? childBuilder,
    required BuildContext context,
    required JsonWidgetData data,
    Key? key,
  }) {
    final model = createModel(childBuilder: childBuilder, data: data);

    return OverflowBox(
      alignment: model.alignment,
      fit: model.fit,
      key: key,
      maxHeight: model.maxHeight,
      maxWidth: model.maxWidth,
      minHeight: model.minHeight,
      minWidth: model.minWidth,
      child: model.child?.build(childBuilder: childBuilder, context: context),
    );
  }
}

class JsonOverflowBox extends JsonWidgetData {
  JsonOverflowBox({
    Map<String, dynamic> args = const {},
    JsonWidgetRegistry? registry,
    this.alignment = Alignment.center,
    this.fit = OverflowBoxFit.max,
    this.maxHeight,
    this.maxWidth,
    this.minHeight,
    this.minWidth,
    this.child,
  }) : super(
         jsonWidgetArgs: JsonOverflowBoxBuilderModel.fromDynamic(
           {
             'alignment': alignment,
             'fit': fit,
             'maxHeight': maxHeight,
             'maxWidth': maxWidth,
             'minHeight': minHeight,
             'minWidth': minWidth,
             'child': child,

             ...args,
           },
           args: args,
           registry: registry,
         ),
         jsonWidgetBuilder:
             () => JsonOverflowBoxBuilder(
               args: JsonOverflowBoxBuilderModel.fromDynamic(
                 {
                   'alignment': alignment,
                   'fit': fit,
                   'maxHeight': maxHeight,
                   'maxWidth': maxWidth,
                   'minHeight': minHeight,
                   'minWidth': minWidth,
                   'child': child,

                   ...args,
                 },
                 args: args,
                 registry: registry,
               ),
             ),
         jsonWidgetType: JsonOverflowBoxBuilder.kType,
       );

  /* AUTOGENERATED FROM [OverflowBox.alignment]*/
  /// How to align the child.
  ///
  /// The x and y values of the alignment control the horizontal and vertical
  /// alignment, respectively. An x value of -1.0 means that the left edge of
  /// the child is aligned with the left edge of the parent whereas an x value
  /// of 1.0 means that the right edge of the child is aligned with the right
  /// edge of the parent. Other values interpolate (and extrapolate) linearly.
  /// For example, a value of 0.0 means that the center of the child is aligned
  /// with the center of the parent.
  ///
  /// Defaults to [Alignment.center].
  ///
  /// See also:
  ///
  ///  * [Alignment], a class with convenient constants typically used to
  ///    specify an [AlignmentGeometry].
  ///  * [AlignmentDirectional], like [Alignment] for specifying alignments
  ///    relative to text direction.
  final AlignmentGeometry alignment;

  /* AUTOGENERATED FROM [OverflowBox.fit]*/
  /// The way to size the render object.
  ///
  /// This only affects scenario when the child does not indeed overflow.
  /// If set to [OverflowBoxFit.deferToChild], the render object will size itself to
  /// match the size of its child within the constraints of its parent or be
  /// as small as the parent allows if no child is set. If set to
  /// [OverflowBoxFit.max] (the default), the render object will size itself
  /// to be as large as the parent allows.
  final OverflowBoxFit fit;

  /* AUTOGENERATED FROM [OverflowBox.maxHeight]*/
  /// The maximum height constraint to give the child. Set this to null (the
  /// default) to use the constraint from the parent instead.
  final double? maxHeight;

  /* AUTOGENERATED FROM [OverflowBox.maxWidth]*/
  /// The maximum width constraint to give the child. Set this to null (the
  /// default) to use the constraint from the parent instead.
  final double? maxWidth;

  /* AUTOGENERATED FROM [OverflowBox.minHeight]*/
  /// The minimum height constraint to give the child. Set this to null (the
  /// default) to use the constraint from the parent instead.
  final double? minHeight;

  /* AUTOGENERATED FROM [OverflowBox.minWidth]*/
  /// The minimum width constraint to give the child. Set this to null (the
  /// default) to use the constraint from the parent instead.
  final double? minWidth;

  final JsonWidgetData? child;
}

/* AUTOGENERATED FROM [OverflowBox]*/
/// Creates a widget that lets its child overflow itself.
class JsonOverflowBoxBuilderModel extends JsonWidgetBuilderModel {
  const JsonOverflowBoxBuilderModel(
    super.args, {
    this.alignment = Alignment.center,
    this.fit = OverflowBoxFit.max,
    this.maxHeight,
    this.maxWidth,
    this.minHeight,
    this.minWidth,
    this.child,
  });

  /* AUTOGENERATED FROM [OverflowBox.alignment]*/
  /// How to align the child.
  ///
  /// The x and y values of the alignment control the horizontal and vertical
  /// alignment, respectively. An x value of -1.0 means that the left edge of
  /// the child is aligned with the left edge of the parent whereas an x value
  /// of 1.0 means that the right edge of the child is aligned with the right
  /// edge of the parent. Other values interpolate (and extrapolate) linearly.
  /// For example, a value of 0.0 means that the center of the child is aligned
  /// with the center of the parent.
  ///
  /// Defaults to [Alignment.center].
  ///
  /// See also:
  ///
  ///  * [Alignment], a class with convenient constants typically used to
  ///    specify an [AlignmentGeometry].
  ///  * [AlignmentDirectional], like [Alignment] for specifying alignments
  ///    relative to text direction.
  final AlignmentGeometry alignment;

  /* AUTOGENERATED FROM [OverflowBox.fit]*/
  /// The way to size the render object.
  ///
  /// This only affects scenario when the child does not indeed overflow.
  /// If set to [OverflowBoxFit.deferToChild], the render object will size itself to
  /// match the size of its child within the constraints of its parent or be
  /// as small as the parent allows if no child is set. If set to
  /// [OverflowBoxFit.max] (the default), the render object will size itself
  /// to be as large as the parent allows.
  final OverflowBoxFit fit;

  /* AUTOGENERATED FROM [OverflowBox.maxHeight]*/
  /// The maximum height constraint to give the child. Set this to null (the
  /// default) to use the constraint from the parent instead.
  final double? maxHeight;

  /* AUTOGENERATED FROM [OverflowBox.maxWidth]*/
  /// The maximum width constraint to give the child. Set this to null (the
  /// default) to use the constraint from the parent instead.
  final double? maxWidth;

  /* AUTOGENERATED FROM [OverflowBox.minHeight]*/
  /// The minimum height constraint to give the child. Set this to null (the
  /// default) to use the constraint from the parent instead.
  final double? minHeight;

  /* AUTOGENERATED FROM [OverflowBox.minWidth]*/
  /// The minimum width constraint to give the child. Set this to null (the
  /// default) to use the constraint from the parent instead.
  final double? minWidth;

  final JsonWidgetData? child;

  static JsonOverflowBoxBuilderModel fromDynamic(
    dynamic map, {
    Map<String, dynamic> args = const {},
    JsonWidgetRegistry? registry,
  }) {
    final result = maybeFromDynamic(map, args: args, registry: registry);

    if (result == null) {
      throw Exception(
        '[JsonOverflowBoxBuilder]: requested to parse from dynamic, but the input is null.',
      );
    }

    return result;
  }

  static JsonOverflowBoxBuilderModel? maybeFromDynamic(
    dynamic map, {
    Map<String, dynamic> args = const {},
    JsonWidgetRegistry? registry,
  }) {
    JsonOverflowBoxBuilderModel? result;

    if (map != null) {
      if (map is String) {
        map = yaon.parse(map, normalize: true);
      }

      if (map is JsonOverflowBoxBuilderModel) {
        result = map;
      } else {
        registry ??= JsonWidgetRegistry.instance;
        map = registry.processArgs(map, <String>{}).value;
        result = JsonOverflowBoxBuilderModel(
          args,
          alignment: () {
            dynamic parsed = ThemeDecoder.decodeAlignmentGeometry(
              map['alignment'],
              validate: false,
            );
            parsed ??= Alignment.center;

            return parsed;
          }(),
          fit: () {
            dynamic parsed = ThemeDecoder.decodeOverflowBoxFit(
              map['fit'],
              validate: false,
            );
            parsed ??= OverflowBoxFit.max;

            return parsed;
          }(),
          maxHeight: () {
            dynamic parsed = JsonClass.maybeParseDouble(map['maxHeight']);

            return parsed;
          }(),
          maxWidth: () {
            dynamic parsed = JsonClass.maybeParseDouble(map['maxWidth']);

            return parsed;
          }(),
          minHeight: () {
            dynamic parsed = JsonClass.maybeParseDouble(map['minHeight']);

            return parsed;
          }(),
          minWidth: () {
            dynamic parsed = JsonClass.maybeParseDouble(map['minWidth']);

            return parsed;
          }(),
          child: () {
            dynamic parsed = JsonWidgetData.maybeFromDynamic(
              map['child'],
              registry: registry,
            );

            return parsed;
          }(),
        );
      }
    }

    return result;
  }

  @override
  Map<String, dynamic> toJson() {
    return JsonClass.removeNull({
      'alignment':
          Alignment.center == alignment
              ? null
              : ThemeEncoder.encodeAlignmentGeometry(alignment),
      'fit':
          OverflowBoxFit.max == fit
              ? null
              : ThemeEncoder.encodeOverflowBoxFit(fit),
      'maxHeight': maxHeight,
      'maxWidth': maxWidth,
      'minHeight': minHeight,
      'minWidth': minWidth,
      'child': child?.toJson(),

      ...args,
    });
  }
}

class OverflowBoxSchema {
  static const id =
      'https://peiffer-innovations.github.io/flutter_json_schemas/schemas/json_dynamic_widget/overflow_box.json';

  static final schema = <String, Object>{
    r'$schema': 'http://json-schema.org/draft-07/schema#',
    r'$id': id,
    'title': 'OverflowBox',
    'type': 'object',
    'additionalProperties': false,
    'properties': {
      'alignment': SchemaHelper.objectSchema(AlignmentGeometrySchema.id),
      'fit': SchemaHelper.objectSchema(OverflowBoxFitSchema.id),
      'maxHeight': SchemaHelper.numberSchema,
      'maxWidth': SchemaHelper.numberSchema,
      'minHeight': SchemaHelper.numberSchema,
      'minWidth': SchemaHelper.numberSchema,
      'child': SchemaHelper.objectSchema(JsonWidgetDataSchema.id),
    },
    'required': [],
  };
}
