// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'json_scrollbar_builder.dart';

// **************************************************************************
// Generator: JsonWidgetLibraryBuilder
// **************************************************************************

// ignore_for_file: avoid_init_to_null
// ignore_for_file: deprecated_member_use

// ignore_for_file: prefer_const_constructors
// ignore_for_file: prefer_const_constructors_in_immutables
// ignore_for_file: prefer_final_locals
// ignore_for_file: prefer_if_null_operators
// ignore_for_file: prefer_single_quotes
// ignore_for_file: unused_local_variable

class JsonScrollbarBuilder extends _JsonScrollbarBuilder {
  const JsonScrollbarBuilder({required super.args});

  static const kType = 'scrollbar';

  /// Constant that can be referenced for the builder's type.
  @override
  String get type => kType;

  /// Static function that is capable of decoding the widget from a dynamic JSON
  /// or YAML set of values.
  static JsonScrollbarBuilder fromDynamic(
    dynamic map, {
    JsonWidgetRegistry? registry,
  }) => JsonScrollbarBuilder(args: map);

  @override
  JsonScrollbarBuilderModel createModel({
    ChildWidgetBuilder? childBuilder,
    required JsonWidgetData data,
  }) {
    final model = JsonScrollbarBuilderModel.fromDynamic(
      args,
      registry: data.jsonWidgetRegistry,
    );

    return model;
  }

  @override
  Scrollbar buildCustom({
    ChildWidgetBuilder? childBuilder,
    required BuildContext context,
    required JsonWidgetData data,
    Key? key,
  }) {
    final model = createModel(childBuilder: childBuilder, data: data);

    return Scrollbar(
      controller: model.controller,
      interactive: model.interactive,
      key: key,
      notificationPredicate: model.notificationPredicate,
      radius: model.radius,
      scrollbarOrientation: model.scrollbarOrientation,
      thickness: model.thickness,
      thumbVisibility: model.thumbVisibility,
      trackVisibility: model.trackVisibility,
      child: model.child.build(childBuilder: childBuilder, context: context),
    );
  }
}

class JsonScrollbar extends JsonWidgetData {
  JsonScrollbar({
    Map<String, dynamic> args = const {},
    JsonWidgetRegistry? registry,
    this.controller,
    this.interactive,
    this.notificationPredicate,
    this.radius,
    this.scrollbarOrientation,
    this.thickness,
    this.thumbVisibility,
    this.trackVisibility,
    required this.child,
  }) : super(
         jsonWidgetArgs: JsonScrollbarBuilderModel.fromDynamic(
           {
             'controller': controller,
             'interactive': interactive,
             'notificationPredicate': notificationPredicate,
             'radius': radius,
             'scrollbarOrientation': scrollbarOrientation,
             'thickness': thickness,
             'thumbVisibility': thumbVisibility,
             'trackVisibility': trackVisibility,
             'child': child,

             ...args,
           },
           args: args,
           registry: registry,
         ),
         jsonWidgetBuilder:
             () => JsonScrollbarBuilder(
               args: JsonScrollbarBuilderModel.fromDynamic(
                 {
                   'controller': controller,
                   'interactive': interactive,
                   'notificationPredicate': notificationPredicate,
                   'radius': radius,
                   'scrollbarOrientation': scrollbarOrientation,
                   'thickness': thickness,
                   'thumbVisibility': thumbVisibility,
                   'trackVisibility': trackVisibility,
                   'child': child,

                   ...args,
                 },
                 args: args,
                 registry: registry,
               ),
             ),
         jsonWidgetType: JsonScrollbarBuilder.kType,
       );

  /* AUTOGENERATED FROM [Scrollbar.controller]*/
  /// {@macro flutter.widgets.Scrollbar.controller}
  final ScrollController? controller;

  /* AUTOGENERATED FROM [Scrollbar.interactive]*/
  /// {@macro flutter.widgets.Scrollbar.interactive}
  final bool? interactive;

  /* AUTOGENERATED FROM [Scrollbar.notificationPredicate]*/
  /// {@macro flutter.widgets.Scrollbar.notificationPredicate}
  final bool Function(ScrollNotification)? notificationPredicate;

  /* AUTOGENERATED FROM [Scrollbar.radius]*/
  /// The [Radius] of the scrollbar thumb's rounded rectangle corners.
  ///
  /// If null, the default value is platform dependent. On [TargetPlatform.android],
  /// no radius is applied to the scrollbar thumb. On [TargetPlatform.iOS],
  /// [CupertinoScrollbar.defaultRadius] is used. The remaining platforms have a
  /// default [Radius.circular] of 8.0 pixels.
  final Radius? radius;

  /* AUTOGENERATED FROM [Scrollbar.scrollbarOrientation]*/
  /// {@macro flutter.widgets.Scrollbar.scrollbarOrientation}
  final ScrollbarOrientation? scrollbarOrientation;

  /* AUTOGENERATED FROM [Scrollbar.thickness]*/
  /// The thickness of the scrollbar in the cross axis of the scrollable.
  ///
  /// If null, the default value is platform dependent. On [TargetPlatform.android],
  /// the default thickness is 4.0 pixels. On [TargetPlatform.iOS],
  /// [CupertinoScrollbar.defaultThickness] is used. The remaining platforms have a
  /// default thickness of 8.0 pixels.
  final double? thickness;

  /* AUTOGENERATED FROM [Scrollbar.thumbVisibility]*/
  /// {@macro flutter.widgets.Scrollbar.thumbVisibility}
  ///
  /// If this property is null, then [ScrollbarThemeData.thumbVisibility] of
  /// [ThemeData.scrollbarTheme] is used. If that is also null, the default value
  /// is false.
  ///
  /// If the thumb visibility is related to the scrollbar's material state,
  /// use the global [ScrollbarThemeData.thumbVisibility] or override the
  /// sub-tree's theme data.
  final bool? thumbVisibility;

  /* AUTOGENERATED FROM [Scrollbar.trackVisibility]*/
  /// {@macro flutter.widgets.Scrollbar.trackVisibility}
  ///
  /// If this property is null, then [ScrollbarThemeData.trackVisibility] of
  /// [ThemeData.scrollbarTheme] is used. If that is also null, the default value
  /// is false.
  ///
  /// If the track visibility is related to the scrollbar's material state,
  /// use the global [ScrollbarThemeData.trackVisibility] or override the
  /// sub-tree's theme data.
  final bool? trackVisibility;

  /* AUTOGENERATED FROM [Scrollbar.child]*/
  /// {@macro flutter.widgets.Scrollbar.child}
  final JsonWidgetData child;
}

/* AUTOGENERATED FROM [Scrollbar]*/
/// Creates a Material Design scrollbar that by default will connect to the
/// closest Scrollable descendant of [child].
///
/// The [child] should be a source of [ScrollNotification] notifications,
/// typically a [Scrollable] widget.
///
/// If the [controller] is null, the default behavior is to
/// enable scrollbar dragging using the [PrimaryScrollController].
///
/// When null, [thickness] defaults to 8.0 pixels on desktop and web, and 4.0
/// pixels when on mobile platforms. A null [radius] will result in a default
/// of an 8.0 pixel circular radius about the corners of the scrollbar thumb,
/// except for when executing on [TargetPlatform.android], which will render the
/// thumb without a radius.
class JsonScrollbarBuilderModel extends JsonWidgetBuilderModel {
  const JsonScrollbarBuilderModel(
    super.args, {
    this.controller,
    this.interactive,
    this.notificationPredicate,
    this.radius,
    this.scrollbarOrientation,
    this.thickness,
    this.thumbVisibility,
    this.trackVisibility,
    required this.child,
  });

  /* AUTOGENERATED FROM [Scrollbar.controller]*/
  /// {@macro flutter.widgets.Scrollbar.controller}
  final ScrollController? controller;

  /* AUTOGENERATED FROM [Scrollbar.interactive]*/
  /// {@macro flutter.widgets.Scrollbar.interactive}
  final bool? interactive;

  /* AUTOGENERATED FROM [Scrollbar.notificationPredicate]*/
  /// {@macro flutter.widgets.Scrollbar.notificationPredicate}
  final bool Function(ScrollNotification)? notificationPredicate;

  /* AUTOGENERATED FROM [Scrollbar.radius]*/
  /// The [Radius] of the scrollbar thumb's rounded rectangle corners.
  ///
  /// If null, the default value is platform dependent. On [TargetPlatform.android],
  /// no radius is applied to the scrollbar thumb. On [TargetPlatform.iOS],
  /// [CupertinoScrollbar.defaultRadius] is used. The remaining platforms have a
  /// default [Radius.circular] of 8.0 pixels.
  final Radius? radius;

  /* AUTOGENERATED FROM [Scrollbar.scrollbarOrientation]*/
  /// {@macro flutter.widgets.Scrollbar.scrollbarOrientation}
  final ScrollbarOrientation? scrollbarOrientation;

  /* AUTOGENERATED FROM [Scrollbar.thickness]*/
  /// The thickness of the scrollbar in the cross axis of the scrollable.
  ///
  /// If null, the default value is platform dependent. On [TargetPlatform.android],
  /// the default thickness is 4.0 pixels. On [TargetPlatform.iOS],
  /// [CupertinoScrollbar.defaultThickness] is used. The remaining platforms have a
  /// default thickness of 8.0 pixels.
  final double? thickness;

  /* AUTOGENERATED FROM [Scrollbar.thumbVisibility]*/
  /// {@macro flutter.widgets.Scrollbar.thumbVisibility}
  ///
  /// If this property is null, then [ScrollbarThemeData.thumbVisibility] of
  /// [ThemeData.scrollbarTheme] is used. If that is also null, the default value
  /// is false.
  ///
  /// If the thumb visibility is related to the scrollbar's material state,
  /// use the global [ScrollbarThemeData.thumbVisibility] or override the
  /// sub-tree's theme data.
  final bool? thumbVisibility;

  /* AUTOGENERATED FROM [Scrollbar.trackVisibility]*/
  /// {@macro flutter.widgets.Scrollbar.trackVisibility}
  ///
  /// If this property is null, then [ScrollbarThemeData.trackVisibility] of
  /// [ThemeData.scrollbarTheme] is used. If that is also null, the default value
  /// is false.
  ///
  /// If the track visibility is related to the scrollbar's material state,
  /// use the global [ScrollbarThemeData.trackVisibility] or override the
  /// sub-tree's theme data.
  final bool? trackVisibility;

  /* AUTOGENERATED FROM [Scrollbar.child]*/
  /// {@macro flutter.widgets.Scrollbar.child}
  final JsonWidgetData child;

  static JsonScrollbarBuilderModel fromDynamic(
    dynamic map, {
    Map<String, dynamic> args = const {},
    JsonWidgetRegistry? registry,
  }) {
    final result = maybeFromDynamic(map, args: args, registry: registry);

    if (result == null) {
      throw Exception(
        '[JsonScrollbarBuilder]: requested to parse from dynamic, but the input is null.',
      );
    }

    return result;
  }

  static JsonScrollbarBuilderModel? maybeFromDynamic(
    dynamic map, {
    Map<String, dynamic> args = const {},
    JsonWidgetRegistry? registry,
  }) {
    JsonScrollbarBuilderModel? result;

    if (map != null) {
      if (map is String) {
        map = yaon.parse(map, normalize: true);
      }

      if (map is JsonScrollbarBuilderModel) {
        result = map;
      } else {
        registry ??= JsonWidgetRegistry.instance;
        map = registry.processArgs(map, <String>{}).value;
        result = JsonScrollbarBuilderModel(
          args,
          controller: map['controller'],
          interactive: JsonClass.maybeParseBool(map['interactive']),
          notificationPredicate: map['notificationPredicate'],
          radius: () {
            dynamic parsed = ThemeDecoder.decodeRadius(
              map['radius'],
              validate: false,
            );

            return parsed;
          }(),
          scrollbarOrientation: () {
            dynamic parsed = ThemeDecoder.decodeScrollbarOrientation(
              map['scrollbarOrientation'],
              validate: false,
            );

            return parsed;
          }(),
          thickness: () {
            dynamic parsed = JsonClass.maybeParseDouble(map['thickness']);

            return parsed;
          }(),
          thumbVisibility: JsonClass.maybeParseBool(map['thumbVisibility']),
          trackVisibility: JsonClass.maybeParseBool(map['trackVisibility']),
          child: () {
            dynamic parsed = JsonWidgetData.fromDynamic(
              map['child'],
              registry: registry,
            );

            if (parsed == null) {
              throw Exception(
                'Null value encountered for required parameter: [child].',
              );
            }
            return parsed;
          }(),
        );
      }
    }

    return result;
  }

  @override
  Map<String, dynamic> toJson() {
    return JsonClass.removeNull({
      'controller': controller,
      'interactive': interactive,
      'notificationPredicate': notificationPredicate,
      'radius': ThemeEncoder.encodeRadius(radius),
      'scrollbarOrientation': ThemeEncoder.encodeScrollbarOrientation(
        scrollbarOrientation,
      ),
      'thickness': thickness,
      'thumbVisibility': thumbVisibility,
      'trackVisibility': trackVisibility,
      'child': child.toJson(),

      ...args,
    });
  }
}

class ScrollbarSchema {
  static const id =
      'https://peiffer-innovations.github.io/flutter_json_schemas/schemas/json_dynamic_widget/scrollbar.json';

  static final schema = <String, Object>{
    r'$schema': 'http://json-schema.org/draft-07/schema#',
    r'$id': id,
    'title': 'Scrollbar',
    'type': 'object',
    'additionalProperties': false,
    'properties': {
      'controller': SchemaHelper.anySchema,
      'interactive': SchemaHelper.boolSchema,
      'notificationPredicate': SchemaHelper.anySchema,
      'radius': SchemaHelper.objectSchema(RadiusSchema.id),
      'scrollbarOrientation': SchemaHelper.objectSchema(
        ScrollbarOrientationSchema.id,
      ),
      'thickness': SchemaHelper.numberSchema,
      'thumbVisibility': SchemaHelper.boolSchema,
      'trackVisibility': SchemaHelper.boolSchema,
      'child': SchemaHelper.objectSchema(JsonWidgetDataSchema.id),
    },
    'required': ['child'],
  };
}
