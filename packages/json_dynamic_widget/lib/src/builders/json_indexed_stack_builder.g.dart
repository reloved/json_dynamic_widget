// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'json_indexed_stack_builder.dart';

// **************************************************************************
// Generator: JsonWidgetLibraryBuilder
// **************************************************************************

// ignore_for_file: avoid_init_to_null
// ignore_for_file: deprecated_member_use

// ignore_for_file: prefer_const_constructors
// ignore_for_file: prefer_const_constructors_in_immutables
// ignore_for_file: prefer_final_locals
// ignore_for_file: prefer_if_null_operators
// ignore_for_file: prefer_single_quotes
// ignore_for_file: unused_local_variable

class JsonIndexedStackBuilder extends _JsonIndexedStackBuilder {
  const JsonIndexedStackBuilder({required super.args});

  static const kType = 'indexed_stack';

  /// Constant that can be referenced for the builder's type.
  @override
  String get type => kType;

  /// Static function that is capable of decoding the widget from a dynamic JSON
  /// or YAML set of values.
  static JsonIndexedStackBuilder fromDynamic(
    dynamic map, {
    JsonWidgetRegistry? registry,
  }) => JsonIndexedStackBuilder(args: map);

  @override
  JsonIndexedStackBuilderModel createModel({
    ChildWidgetBuilder? childBuilder,
    required JsonWidgetData data,
  }) {
    final model = JsonIndexedStackBuilderModel.fromDynamic(
      args,
      registry: data.jsonWidgetRegistry,
    );

    return model;
  }

  @override
  IndexedStack buildCustom({
    ChildWidgetBuilder? childBuilder,
    required BuildContext context,
    required JsonWidgetData data,
    Key? key,
  }) {
    final model = createModel(childBuilder: childBuilder, data: data);

    return IndexedStack(
      alignment: model.alignment,
      clipBehavior: model.clipBehavior,
      index: model.index,
      key: key,
      sizing: model.sizing,
      textDirection: model.textDirection,
      children: [
        for (var d in model.children)
          d.build(childBuilder: childBuilder, context: context),
      ],
    );
  }
}

class JsonIndexedStack extends JsonWidgetData {
  JsonIndexedStack({
    Map<String, dynamic> args = const {},
    JsonWidgetRegistry? registry,
    this.alignment = AlignmentDirectional.topStart,
    this.clipBehavior = Clip.hardEdge,
    this.index = 0,
    this.sizing = StackFit.loose,
    this.textDirection,
    this.children = const <JsonWidgetData>[],
  }) : super(
         jsonWidgetArgs: JsonIndexedStackBuilderModel.fromDynamic(
           {
             'alignment': alignment,
             'clipBehavior': clipBehavior,
             'index': index,
             'sizing': sizing,
             'textDirection': textDirection,
             'children': children,

             ...args,
           },
           args: args,
           registry: registry,
         ),
         jsonWidgetBuilder:
             () => JsonIndexedStackBuilder(
               args: JsonIndexedStackBuilderModel.fromDynamic(
                 {
                   'alignment': alignment,
                   'clipBehavior': clipBehavior,
                   'index': index,
                   'sizing': sizing,
                   'textDirection': textDirection,
                   'children': children,

                   ...args,
                 },
                 args: args,
                 registry: registry,
               ),
             ),
         jsonWidgetType: JsonIndexedStackBuilder.kType,
       );

  /* AUTOGENERATED FROM [IndexedStack.alignment]*/
  /// How to align the non-positioned and partially-positioned children in the
  /// stack.
  ///
  /// Defaults to [AlignmentDirectional.topStart].
  ///
  /// See [Stack.alignment] for more information.
  final AlignmentGeometry alignment;

  /* AUTOGENERATED FROM [IndexedStack.clipBehavior]*/
  /// {@macro flutter.material.Material.clipBehavior}
  ///
  /// Defaults to [Clip.hardEdge].
  final Clip clipBehavior;

  /* AUTOGENERATED FROM [IndexedStack.index]*/
  /// The index of the child to show.
  ///
  /// If this is null, none of the children will be shown.
  final int? index;

  /* AUTOGENERATED FROM [IndexedStack.sizing]*/
  /// How to size the non-positioned children in the stack.
  ///
  /// Defaults to [StackFit.loose].
  ///
  /// See [Stack.fit] for more information.
  final StackFit sizing;

  /* AUTOGENERATED FROM [IndexedStack.textDirection]*/
  /// The text direction with which to resolve [alignment].
  ///
  /// Defaults to the ambient [Directionality].
  final TextDirection? textDirection;

  /* AUTOGENERATED FROM [IndexedStack.children]*/
  /// The child widgets of the stack.
  ///
  /// Only the child at index [index] will be shown.
  ///
  /// See [Stack.children] for more information.
  final List<JsonWidgetData> children;
}

/* AUTOGENERATED FROM [IndexedStack]*/
/// Creates a [Stack] widget that paints a single child.
class JsonIndexedStackBuilderModel extends JsonWidgetBuilderModel {
  const JsonIndexedStackBuilderModel(
    super.args, {
    this.alignment = AlignmentDirectional.topStart,
    this.clipBehavior = Clip.hardEdge,
    this.index = 0,
    this.sizing = StackFit.loose,
    this.textDirection,
    this.children = const <JsonWidgetData>[],
  });

  /* AUTOGENERATED FROM [IndexedStack.alignment]*/
  /// How to align the non-positioned and partially-positioned children in the
  /// stack.
  ///
  /// Defaults to [AlignmentDirectional.topStart].
  ///
  /// See [Stack.alignment] for more information.
  final AlignmentGeometry alignment;

  /* AUTOGENERATED FROM [IndexedStack.clipBehavior]*/
  /// {@macro flutter.material.Material.clipBehavior}
  ///
  /// Defaults to [Clip.hardEdge].
  final Clip clipBehavior;

  /* AUTOGENERATED FROM [IndexedStack.index]*/
  /// The index of the child to show.
  ///
  /// If this is null, none of the children will be shown.
  final int? index;

  /* AUTOGENERATED FROM [IndexedStack.sizing]*/
  /// How to size the non-positioned children in the stack.
  ///
  /// Defaults to [StackFit.loose].
  ///
  /// See [Stack.fit] for more information.
  final StackFit sizing;

  /* AUTOGENERATED FROM [IndexedStack.textDirection]*/
  /// The text direction with which to resolve [alignment].
  ///
  /// Defaults to the ambient [Directionality].
  final TextDirection? textDirection;

  /* AUTOGENERATED FROM [IndexedStack.children]*/
  /// The child widgets of the stack.
  ///
  /// Only the child at index [index] will be shown.
  ///
  /// See [Stack.children] for more information.
  final List<JsonWidgetData> children;

  static JsonIndexedStackBuilderModel fromDynamic(
    dynamic map, {
    Map<String, dynamic> args = const {},
    JsonWidgetRegistry? registry,
  }) {
    final result = maybeFromDynamic(map, args: args, registry: registry);

    if (result == null) {
      throw Exception(
        '[JsonIndexedStackBuilder]: requested to parse from dynamic, but the input is null.',
      );
    }

    return result;
  }

  static JsonIndexedStackBuilderModel? maybeFromDynamic(
    dynamic map, {
    Map<String, dynamic> args = const {},
    JsonWidgetRegistry? registry,
  }) {
    JsonIndexedStackBuilderModel? result;

    if (map != null) {
      if (map is String) {
        map = yaon.parse(map, normalize: true);
      }

      if (map is JsonIndexedStackBuilderModel) {
        result = map;
      } else {
        registry ??= JsonWidgetRegistry.instance;
        map = registry.processArgs(map, <String>{}).value;
        result = JsonIndexedStackBuilderModel(
          args,
          alignment: () {
            dynamic parsed = ThemeDecoder.decodeAlignmentGeometry(
              map['alignment'],
              validate: false,
            );
            parsed ??= AlignmentDirectional.topStart;

            return parsed;
          }(),
          clipBehavior: () {
            dynamic parsed = ThemeDecoder.decodeClip(
              map['clipBehavior'],
              validate: false,
            );
            parsed ??= Clip.hardEdge;

            return parsed;
          }(),
          index: () {
            dynamic parsed = JsonClass.maybeParseInt(map['index']);

            if (!map.containsKey('index')) {
              parsed ??= 0;
            }

            return parsed;
          }(),
          sizing: () {
            dynamic parsed = ThemeDecoder.decodeStackFit(
              map['sizing'],
              validate: false,
            );
            parsed ??= StackFit.loose;

            return parsed;
          }(),
          textDirection: () {
            dynamic parsed = ThemeDecoder.decodeTextDirection(
              map['textDirection'],
              validate: false,
            );

            return parsed;
          }(),
          children: () {
            dynamic parsed = JsonWidgetData.maybeFromDynamicList(
              map['children'],
              registry: registry,
            );
            parsed ??= const <JsonWidgetData>[];

            return parsed;
          }(),
        );
      }
    }

    return result;
  }

  @override
  Map<String, dynamic> toJson() {
    return JsonClass.removeNull({
      'alignment':
          AlignmentDirectional.topStart == alignment
              ? null
              : ThemeEncoder.encodeAlignmentGeometry(alignment),
      'clipBehavior':
          Clip.hardEdge == clipBehavior
              ? null
              : ThemeEncoder.encodeClip(clipBehavior),
      'index': 0 == index ? null : index,
      'sizing':
          StackFit.loose == sizing ? null : ThemeEncoder.encodeStackFit(sizing),
      'textDirection': ThemeEncoder.encodeTextDirection(textDirection),
      'children':
          const <JsonWidgetData>[] == children
              ? null
              : JsonClass.toJsonList(children),

      ...args,
    });
  }
}

class IndexedStackSchema {
  static const id =
      'https://peiffer-innovations.github.io/flutter_json_schemas/schemas/json_dynamic_widget/indexed_stack.json';

  static final schema = <String, Object>{
    r'$schema': 'http://json-schema.org/draft-07/schema#',
    r'$id': id,
    'title': 'IndexedStack',
    'type': 'object',
    'additionalProperties': false,
    'properties': {
      'alignment': SchemaHelper.objectSchema(AlignmentGeometrySchema.id),
      'clipBehavior': SchemaHelper.objectSchema(ClipSchema.id),
      'index': SchemaHelper.numberSchema,
      'sizing': SchemaHelper.objectSchema(StackFitSchema.id),
      'textDirection': SchemaHelper.objectSchema(TextDirectionSchema.id),
      'children': SchemaHelper.arraySchema(JsonWidgetDataSchema.id),
    },
    'required': [],
  };
}
