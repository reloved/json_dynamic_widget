// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'json_clip_path_builder.dart';

// **************************************************************************
// Generator: JsonWidgetLibraryBuilder
// **************************************************************************

// ignore_for_file: avoid_init_to_null
// ignore_for_file: deprecated_member_use

// ignore_for_file: prefer_const_constructors
// ignore_for_file: prefer_const_constructors_in_immutables
// ignore_for_file: prefer_final_locals
// ignore_for_file: prefer_if_null_operators
// ignore_for_file: prefer_single_quotes
// ignore_for_file: unused_local_variable

class JsonClipPathBuilder extends _JsonClipPathBuilder {
  const JsonClipPathBuilder({required super.args});

  static const kType = 'clip_path';

  /// Constant that can be referenced for the builder's type.
  @override
  String get type => kType;

  /// Static function that is capable of decoding the widget from a dynamic JSON
  /// or YAML set of values.
  static JsonClipPathBuilder fromDynamic(
    dynamic map, {
    JsonWidgetRegistry? registry,
  }) => JsonClipPathBuilder(args: map);

  @override
  JsonClipPathBuilderModel createModel({
    ChildWidgetBuilder? childBuilder,
    required JsonWidgetData data,
  }) {
    final model = JsonClipPathBuilderModel.fromDynamic(
      args,
      registry: data.jsonWidgetRegistry,
    );

    return model;
  }

  @override
  ClipPath buildCustom({
    ChildWidgetBuilder? childBuilder,
    required BuildContext context,
    required JsonWidgetData data,
    Key? key,
  }) {
    final model = createModel(childBuilder: childBuilder, data: data);

    return ClipPath(
      clipBehavior: model.clipBehavior,
      clipper: model.clipper,
      key: key,
      child: model.child?.build(childBuilder: childBuilder, context: context),
    );
  }
}

class JsonClipPath extends JsonWidgetData {
  JsonClipPath({
    Map<String, dynamic> args = const {},
    JsonWidgetRegistry? registry,
    this.clipBehavior = Clip.antiAlias,
    this.clipper,
    this.child,
  }) : super(
         jsonWidgetArgs: JsonClipPathBuilderModel.fromDynamic(
           {
             'clipBehavior': clipBehavior,
             'clipper': clipper,
             'child': child,

             ...args,
           },
           args: args,
           registry: registry,
         ),
         jsonWidgetBuilder:
             () => JsonClipPathBuilder(
               args: JsonClipPathBuilderModel.fromDynamic(
                 {
                   'clipBehavior': clipBehavior,
                   'clipper': clipper,
                   'child': child,

                   ...args,
                 },
                 args: args,
                 registry: registry,
               ),
             ),
         jsonWidgetType: JsonClipPathBuilder.kType,
       );

  /* AUTOGENERATED FROM [ClipPath.clipBehavior]*/
  /// {@macro flutter.rendering.ClipRectLayer.clipBehavior}
  ///
  /// Defaults to [Clip.antiAlias].
  final Clip clipBehavior;

  /* AUTOGENERATED FROM [ClipPath.clipper]*/
  /// If non-null, determines which clip to use.
  ///
  /// The default clip, which is used if this property is null, is the
  /// bounding box rectangle of the widget. [ClipRect] is a more
  /// efficient way of obtaining that effect.
  final CustomClipper<Path>? clipper;

  final JsonWidgetData? child;
}

/* AUTOGENERATED FROM [ClipPath]*/
/// Creates a path clip.
///
/// If [clipper] is null, the clip will be a rectangle that matches the layout
/// size and location of the child. However, rather than use this default,
/// consider using a [ClipRect], which can achieve the same effect more
/// efficiently.
///
/// If [clipBehavior] is [Clip.none], no clipping will be applied.
class JsonClipPathBuilderModel extends JsonWidgetBuilderModel {
  const JsonClipPathBuilderModel(
    super.args, {
    this.clipBehavior = Clip.antiAlias,
    this.clipper,
    this.child,
  });

  /* AUTOGENERATED FROM [ClipPath.clipBehavior]*/
  /// {@macro flutter.rendering.ClipRectLayer.clipBehavior}
  ///
  /// Defaults to [Clip.antiAlias].
  final Clip clipBehavior;

  /* AUTOGENERATED FROM [ClipPath.clipper]*/
  /// If non-null, determines which clip to use.
  ///
  /// The default clip, which is used if this property is null, is the
  /// bounding box rectangle of the widget. [ClipRect] is a more
  /// efficient way of obtaining that effect.
  final CustomClipper<Path>? clipper;

  final JsonWidgetData? child;

  static JsonClipPathBuilderModel fromDynamic(
    dynamic map, {
    Map<String, dynamic> args = const {},
    JsonWidgetRegistry? registry,
  }) {
    final result = maybeFromDynamic(map, args: args, registry: registry);

    if (result == null) {
      throw Exception(
        '[JsonClipPathBuilder]: requested to parse from dynamic, but the input is null.',
      );
    }

    return result;
  }

  static JsonClipPathBuilderModel? maybeFromDynamic(
    dynamic map, {
    Map<String, dynamic> args = const {},
    JsonWidgetRegistry? registry,
  }) {
    JsonClipPathBuilderModel? result;

    if (map != null) {
      if (map is String) {
        map = yaon.parse(map, normalize: true);
      }

      if (map is JsonClipPathBuilderModel) {
        result = map;
      } else {
        registry ??= JsonWidgetRegistry.instance;
        map = registry.processArgs(map, <String>{}).value;
        result = JsonClipPathBuilderModel(
          args,
          clipBehavior: () {
            dynamic parsed = ThemeDecoder.decodeClip(
              map['clipBehavior'],
              validate: false,
            );
            parsed ??= Clip.antiAlias;

            return parsed;
          }(),
          clipper: map['clipper'],
          child: () {
            dynamic parsed = JsonWidgetData.maybeFromDynamic(
              map['child'],
              registry: registry,
            );

            return parsed;
          }(),
        );
      }
    }

    return result;
  }

  @override
  Map<String, dynamic> toJson() {
    return JsonClass.removeNull({
      'clipBehavior':
          Clip.antiAlias == clipBehavior
              ? null
              : ThemeEncoder.encodeClip(clipBehavior),
      'clipper': clipper,
      'child': child?.toJson(),

      ...args,
    });
  }
}

class ClipPathSchema {
  static const id =
      'https://peiffer-innovations.github.io/flutter_json_schemas/schemas/json_dynamic_widget/clip_path.json';

  static final schema = <String, Object>{
    r'$schema': 'http://json-schema.org/draft-07/schema#',
    r'$id': id,
    'title': 'ClipPath',
    'type': 'object',
    'additionalProperties': false,
    'properties': {
      'clipBehavior': SchemaHelper.objectSchema(ClipSchema.id),
      'clipper': SchemaHelper.anySchema,
      'child': SchemaHelper.objectSchema(JsonWidgetDataSchema.id),
    },
    'required': [],
  };
}
