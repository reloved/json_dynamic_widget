// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'json_column_builder.dart';

// **************************************************************************
// Generator: JsonWidgetLibraryBuilder
// **************************************************************************

// ignore_for_file: avoid_init_to_null
// ignore_for_file: deprecated_member_use

// ignore_for_file: prefer_const_constructors
// ignore_for_file: prefer_const_constructors_in_immutables
// ignore_for_file: prefer_final_locals
// ignore_for_file: prefer_if_null_operators
// ignore_for_file: prefer_single_quotes
// ignore_for_file: unused_local_variable

class JsonColumnBuilder extends _JsonColumnBuilder {
  const JsonColumnBuilder({required super.args});

  static const kType = 'column';

  /// Constant that can be referenced for the builder's type.
  @override
  String get type => kType;

  /// Static function that is capable of decoding the widget from a dynamic JSON
  /// or YAML set of values.
  static JsonColumnBuilder fromDynamic(
    dynamic map, {
    JsonWidgetRegistry? registry,
  }) => JsonColumnBuilder(args: map);

  @override
  JsonColumnBuilderModel createModel({
    ChildWidgetBuilder? childBuilder,
    required JsonWidgetData data,
  }) {
    final model = JsonColumnBuilderModel.fromDynamic(
      args,
      registry: data.jsonWidgetRegistry,
    );

    return model;
  }

  @override
  Column buildCustom({
    ChildWidgetBuilder? childBuilder,
    required BuildContext context,
    required JsonWidgetData data,
    Key? key,
  }) {
    final model = createModel(childBuilder: childBuilder, data: data);

    return Column(
      crossAxisAlignment: model.crossAxisAlignment,
      key: key,
      mainAxisAlignment: model.mainAxisAlignment,
      mainAxisSize: model.mainAxisSize,
      spacing: model.spacing,
      textBaseline: model.textBaseline,
      textDirection: model.textDirection,
      verticalDirection: model.verticalDirection,
      children: [
        for (var d in model.children)
          d.build(childBuilder: childBuilder, context: context),
      ],
    );
  }
}

class JsonColumn extends JsonWidgetData {
  JsonColumn({
    Map<String, dynamic> args = const {},
    JsonWidgetRegistry? registry,
    this.crossAxisAlignment = CrossAxisAlignment.center,
    this.mainAxisAlignment = MainAxisAlignment.start,
    this.mainAxisSize = MainAxisSize.max,
    this.spacing = 0.0,
    this.textBaseline,
    this.textDirection,
    this.verticalDirection = VerticalDirection.down,
    this.children = const <JsonWidgetData>[],
  }) : super(
         jsonWidgetArgs: JsonColumnBuilderModel.fromDynamic(
           {
             'crossAxisAlignment': crossAxisAlignment,
             'mainAxisAlignment': mainAxisAlignment,
             'mainAxisSize': mainAxisSize,
             'spacing': spacing,
             'textBaseline': textBaseline,
             'textDirection': textDirection,
             'verticalDirection': verticalDirection,
             'children': children,

             ...args,
           },
           args: args,
           registry: registry,
         ),
         jsonWidgetBuilder:
             () => JsonColumnBuilder(
               args: JsonColumnBuilderModel.fromDynamic(
                 {
                   'crossAxisAlignment': crossAxisAlignment,
                   'mainAxisAlignment': mainAxisAlignment,
                   'mainAxisSize': mainAxisSize,
                   'spacing': spacing,
                   'textBaseline': textBaseline,
                   'textDirection': textDirection,
                   'verticalDirection': verticalDirection,
                   'children': children,

                   ...args,
                 },
                 args: args,
                 registry: registry,
               ),
             ),
         jsonWidgetType: JsonColumnBuilder.kType,
       );

  final CrossAxisAlignment crossAxisAlignment;

  final MainAxisAlignment mainAxisAlignment;

  final MainAxisSize mainAxisSize;

  final double spacing;

  final TextBaseline? textBaseline;

  final TextDirection? textDirection;

  final VerticalDirection verticalDirection;

  final List<JsonWidgetData> children;
}

/* AUTOGENERATED FROM [Column]*/
/// Creates a vertical array of children.
///
/// If [crossAxisAlignment] is [CrossAxisAlignment.baseline], then
/// [textBaseline] must not be null.
///
/// The [textDirection] argument defaults to the ambient [Directionality], if
/// any. If there is no ambient directionality, and a text direction is going
/// to be necessary to disambiguate `start` or `end` values for the
/// [crossAxisAlignment], the [textDirection] must not be null.
class JsonColumnBuilderModel extends JsonWidgetBuilderModel {
  const JsonColumnBuilderModel(
    super.args, {
    this.crossAxisAlignment = CrossAxisAlignment.center,
    this.mainAxisAlignment = MainAxisAlignment.start,
    this.mainAxisSize = MainAxisSize.max,
    this.spacing = 0.0,
    this.textBaseline,
    this.textDirection,
    this.verticalDirection = VerticalDirection.down,
    this.children = const <JsonWidgetData>[],
  });

  final CrossAxisAlignment crossAxisAlignment;

  final MainAxisAlignment mainAxisAlignment;

  final MainAxisSize mainAxisSize;

  final double spacing;

  final TextBaseline? textBaseline;

  final TextDirection? textDirection;

  final VerticalDirection verticalDirection;

  final List<JsonWidgetData> children;

  static JsonColumnBuilderModel fromDynamic(
    dynamic map, {
    Map<String, dynamic> args = const {},
    JsonWidgetRegistry? registry,
  }) {
    final result = maybeFromDynamic(map, args: args, registry: registry);

    if (result == null) {
      throw Exception(
        '[JsonColumnBuilder]: requested to parse from dynamic, but the input is null.',
      );
    }

    return result;
  }

  static JsonColumnBuilderModel? maybeFromDynamic(
    dynamic map, {
    Map<String, dynamic> args = const {},
    JsonWidgetRegistry? registry,
  }) {
    JsonColumnBuilderModel? result;

    if (map != null) {
      if (map is String) {
        map = yaon.parse(map, normalize: true);
      }

      if (map is JsonColumnBuilderModel) {
        result = map;
      } else {
        registry ??= JsonWidgetRegistry.instance;
        map = registry.processArgs(map, <String>{}).value;
        result = JsonColumnBuilderModel(
          args,
          crossAxisAlignment: () {
            dynamic parsed = ThemeDecoder.decodeCrossAxisAlignment(
              map['crossAxisAlignment'],
              validate: false,
            );
            parsed ??= CrossAxisAlignment.center;

            return parsed;
          }(),
          mainAxisAlignment: () {
            dynamic parsed = ThemeDecoder.decodeMainAxisAlignment(
              map['mainAxisAlignment'],
              validate: false,
            );
            parsed ??= MainAxisAlignment.start;

            return parsed;
          }(),
          mainAxisSize: () {
            dynamic parsed = ThemeDecoder.decodeMainAxisSize(
              map['mainAxisSize'],
              validate: false,
            );
            parsed ??= MainAxisSize.max;

            return parsed;
          }(),
          spacing: () {
            dynamic parsed = JsonClass.maybeParseDouble(map['spacing']);

            parsed ??= 0.0;

            return parsed;
          }(),
          textBaseline: () {
            dynamic parsed = ThemeDecoder.decodeTextBaseline(
              map['textBaseline'],
              validate: false,
            );

            return parsed;
          }(),
          textDirection: () {
            dynamic parsed = ThemeDecoder.decodeTextDirection(
              map['textDirection'],
              validate: false,
            );

            return parsed;
          }(),
          verticalDirection: () {
            dynamic parsed = ThemeDecoder.decodeVerticalDirection(
              map['verticalDirection'],
              validate: false,
            );
            parsed ??= VerticalDirection.down;

            return parsed;
          }(),
          children: () {
            dynamic parsed = JsonWidgetData.maybeFromDynamicList(
              map['children'],
              registry: registry,
            );
            parsed ??= const <JsonWidgetData>[];

            return parsed;
          }(),
        );
      }
    }

    return result;
  }

  @override
  Map<String, dynamic> toJson() {
    return JsonClass.removeNull({
      'crossAxisAlignment':
          CrossAxisAlignment.center == crossAxisAlignment
              ? null
              : ThemeEncoder.encodeCrossAxisAlignment(crossAxisAlignment),
      'mainAxisAlignment':
          MainAxisAlignment.start == mainAxisAlignment
              ? null
              : ThemeEncoder.encodeMainAxisAlignment(mainAxisAlignment),
      'mainAxisSize':
          MainAxisSize.max == mainAxisSize
              ? null
              : ThemeEncoder.encodeMainAxisSize(mainAxisSize),
      'spacing': 0.0 == spacing ? null : spacing,
      'textBaseline': ThemeEncoder.encodeTextBaseline(textBaseline),
      'textDirection': ThemeEncoder.encodeTextDirection(textDirection),
      'verticalDirection':
          VerticalDirection.down == verticalDirection
              ? null
              : ThemeEncoder.encodeVerticalDirection(verticalDirection),
      'children':
          const <JsonWidgetData>[] == children
              ? null
              : JsonClass.toJsonList(children),

      ...args,
    });
  }
}

class ColumnSchema {
  static const id =
      'https://peiffer-innovations.github.io/flutter_json_schemas/schemas/json_dynamic_widget/column.json';

  static final schema = <String, Object>{
    r'$schema': 'http://json-schema.org/draft-07/schema#',
    r'$id': id,
    'title': 'Column',
    'type': 'object',
    'additionalProperties': false,
    'properties': {
      'crossAxisAlignment': SchemaHelper.objectSchema(
        CrossAxisAlignmentSchema.id,
      ),
      'mainAxisAlignment': SchemaHelper.objectSchema(
        MainAxisAlignmentSchema.id,
      ),
      'mainAxisSize': SchemaHelper.objectSchema(MainAxisSizeSchema.id),
      'spacing': SchemaHelper.numberSchema,
      'textBaseline': SchemaHelper.objectSchema(TextBaselineSchema.id),
      'textDirection': SchemaHelper.objectSchema(TextDirectionSchema.id),
      'verticalDirection': SchemaHelper.objectSchema(
        VerticalDirectionSchema.id,
      ),
      'children': SchemaHelper.arraySchema(JsonWidgetDataSchema.id),
    },
    'required': [],
  };
}
