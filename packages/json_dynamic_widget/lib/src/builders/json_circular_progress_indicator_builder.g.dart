// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'json_circular_progress_indicator_builder.dart';

// **************************************************************************
// Generator: JsonWidgetLibraryBuilder
// **************************************************************************

// ignore_for_file: avoid_init_to_null
// ignore_for_file: deprecated_member_use

// ignore_for_file: prefer_const_constructors
// ignore_for_file: prefer_const_constructors_in_immutables
// ignore_for_file: prefer_final_locals
// ignore_for_file: prefer_if_null_operators
// ignore_for_file: prefer_single_quotes
// ignore_for_file: unused_local_variable

class JsonCircularProgressIndicatorBuilder
    extends _JsonCircularProgressIndicatorBuilder {
  const JsonCircularProgressIndicatorBuilder({required super.args});

  static const kType = 'circular_progress_indicator';

  /// Constant that can be referenced for the builder's type.
  @override
  String get type => kType;

  /// Static function that is capable of decoding the widget from a dynamic JSON
  /// or YAML set of values.
  static JsonCircularProgressIndicatorBuilder fromDynamic(
    dynamic map, {
    JsonWidgetRegistry? registry,
  }) => JsonCircularProgressIndicatorBuilder(args: map);

  @override
  JsonCircularProgressIndicatorBuilderModel createModel({
    ChildWidgetBuilder? childBuilder,
    required JsonWidgetData data,
  }) {
    final model = JsonCircularProgressIndicatorBuilderModel.fromDynamic(
      args,
      registry: data.jsonWidgetRegistry,
    );

    return model;
  }

  @override
  CircularProgressIndicator buildCustom({
    ChildWidgetBuilder? childBuilder,
    required BuildContext context,
    required JsonWidgetData data,
    Key? key,
  }) {
    final model = createModel(childBuilder: childBuilder, data: data);

    final strokeAlignDecoded = _decodeStrokeAlign(value: model.strokeAlign);
    final valueColorDecoded = _decodeValueColor(value: model.valueColor);

    return CircularProgressIndicator(
      backgroundColor: model.backgroundColor,
      color: model.color,
      constraints: model.constraints,
      key: key,
      padding: model.padding,
      semanticsLabel: model.semanticsLabel,
      semanticsValue: model.semanticsValue,
      strokeAlign: strokeAlignDecoded,
      strokeCap: model.strokeCap,
      strokeWidth: model.strokeWidth,
      trackGap: model.trackGap,
      value: model.value,
      valueColor: valueColorDecoded,
      year2023: model.year2023,
    );
  }
}

class JsonCircularProgressIndicator extends JsonWidgetData {
  JsonCircularProgressIndicator({
    Map<String, dynamic> args = const {},
    JsonWidgetRegistry? registry,
    this.backgroundColor,
    this.color,
    this.constraints,
    this.padding,
    this.semanticsLabel,
    this.semanticsValue,
    this.strokeAlign = CircularProgressIndicator.strokeAlignCenter,
    this.strokeCap,
    this.strokeWidth,
    this.trackGap,
    this.value,
    this.valueColor = null,
    this.year2023,
  }) : super(
         jsonWidgetArgs: JsonCircularProgressIndicatorBuilderModel.fromDynamic(
           {
             'backgroundColor': backgroundColor,
             'color': color,
             'constraints': constraints,
             'padding': padding,
             'semanticsLabel': semanticsLabel,
             'semanticsValue': semanticsValue,
             'strokeAlign': strokeAlign,
             'strokeCap': strokeCap,
             'strokeWidth': strokeWidth,
             'trackGap': trackGap,
             'value': value,
             'valueColor': valueColor,
             'year2023': year2023,

             ...args,
           },
           args: args,
           registry: registry,
         ),
         jsonWidgetBuilder:
             () => JsonCircularProgressIndicatorBuilder(
               args: JsonCircularProgressIndicatorBuilderModel.fromDynamic(
                 {
                   'backgroundColor': backgroundColor,
                   'color': color,
                   'constraints': constraints,
                   'padding': padding,
                   'semanticsLabel': semanticsLabel,
                   'semanticsValue': semanticsValue,
                   'strokeAlign': strokeAlign,
                   'strokeCap': strokeCap,
                   'strokeWidth': strokeWidth,
                   'trackGap': trackGap,
                   'value': value,
                   'valueColor': valueColor,
                   'year2023': year2023,

                   ...args,
                 },
                 args: args,
                 registry: registry,
               ),
             ),
         jsonWidgetType: JsonCircularProgressIndicatorBuilder.kType,
       );

  final Color? backgroundColor;

  final Color? color;

  /* AUTOGENERATED FROM [CircularProgressIndicator.constraints]*/
  /// Defines minimum and maximum sizes for a [CircularProgressIndicator].
  ///
  /// If null, then the [ProgressIndicatorThemeData.constraints] will be used.
  /// Otherwise, defaults to a minimum width and height of 36 pixels.
  final BoxConstraints? constraints;

  /* AUTOGENERATED FROM [CircularProgressIndicator.padding]*/
  /// The padding around the indicator track.
  ///
  /// If null, then the [ProgressIndicatorThemeData.circularTrackPadding] will be
  /// used. If that is null and [year2023] is false, then defaults to `EdgeInsets.all(4.0)`
  /// padding. Otherwise, defaults to zero padding.
  final EdgeInsetsGeometry? padding;

  final String? semanticsLabel;

  final String? semanticsValue;

  /* AUTOGENERATED FROM [CircularProgressIndicator.strokeAlign]*/
  /// The relative position of the stroke on a [CircularProgressIndicator].
  ///
  /// Values typically range from -1.0 ([strokeAlignInside], inside stroke)
  /// to 1.0 ([strokeAlignOutside], outside stroke),
  /// without any bound constraints (e.g., a value of -2.0 is not typical, but allowed).
  /// A value of 0 ([strokeAlignCenter]) will center the border
  /// on the edge of the widget.
  ///
  /// If [year2023] is true, then the default value is [strokeAlignCenter].
  /// Otherwise, the default value is [strokeAlignInside].
  final dynamic strokeAlign;

  /* AUTOGENERATED FROM [CircularProgressIndicator.strokeCap]*/
  /// The progress indicator's line ending.
  ///
  /// This determines the shape of the stroke ends of the progress indicator.
  /// By default, [strokeCap] is null.
  /// When [value] is null (indeterminate), the stroke ends are set to
  /// [StrokeCap.square]. When [value] is not null, the stroke
  /// ends are set to [StrokeCap.butt].
  ///
  /// Setting [strokeCap] to [StrokeCap.round] will result in a rounded end.
  /// Setting [strokeCap] to [StrokeCap.butt] with [value] == null will result
  /// in a slightly different indeterminate animation; the indicator completely
  /// disappears and reappears on its minimum value.
  /// Setting [strokeCap] to [StrokeCap.square] with [value] != null will
  /// result in a different display of [value]. The indicator will start
  /// drawing from slightly less than the start, and end slightly after
  /// the end. This will produce an alternative result, as the
  /// default behavior, for example, that a [value] of 0.5 starts at 90 degrees
  /// and ends at 270 degrees. With [StrokeCap.square], it could start 85
  /// degrees and end at 275 degrees.
  final StrokeCap? strokeCap;

  /* AUTOGENERATED FROM [CircularProgressIndicator.strokeWidth]*/
  /// The width of the line used to draw the circle.
  final double? strokeWidth;

  /* AUTOGENERATED FROM [CircularProgressIndicator.trackGap]*/
  /// The gap between the active indicator and the background track.
  ///
  /// If [year2023] is false or [ThemeData.useMaterial3] is false, then no track
  /// gap will be drawn.
  ///
  /// Set [trackGap] to 0 to hide the track gap.
  ///
  /// If null, then the [ProgressIndicatorThemeData.trackGap] will be used.
  /// If that is null, then defaults to 4.
  final double? trackGap;

  final double? value;

  final dynamic valueColor;

  /* AUTOGENERATED FROM [CircularProgressIndicator.year2023]*/
  /// When true, the [CircularProgressIndicator] will use the 2023 Material Design 3
  /// appearance.
  ///
  /// If null, then the [ProgressIndicatorThemeData.year2023] will be used.
  /// If that is null, then defaults to true.
  ///
  /// If this is set to false, the [CircularProgressIndicator] will use the
  /// latest Material Design 3 appearance, which was introduced in December 2023.
  ///
  /// If [ThemeData.useMaterial3] is false, then this property is ignored.
  final bool? year2023;
}

/* AUTOGENERATED FROM [CircularProgressIndicator]*/
/// Creates a circular progress indicator.
///
/// {@macro flutter.material.ProgressIndicator.ProgressIndicator}
class JsonCircularProgressIndicatorBuilderModel extends JsonWidgetBuilderModel {
  const JsonCircularProgressIndicatorBuilderModel(
    super.args, {
    this.backgroundColor,
    this.color,
    this.constraints,
    this.padding,
    this.semanticsLabel,
    this.semanticsValue,
    this.strokeAlign = CircularProgressIndicator.strokeAlignCenter,
    this.strokeCap,
    this.strokeWidth,
    this.trackGap,
    this.value,
    this.valueColor = null,
    this.year2023,
  });

  final Color? backgroundColor;

  final Color? color;

  /* AUTOGENERATED FROM [CircularProgressIndicator.constraints]*/
  /// Defines minimum and maximum sizes for a [CircularProgressIndicator].
  ///
  /// If null, then the [ProgressIndicatorThemeData.constraints] will be used.
  /// Otherwise, defaults to a minimum width and height of 36 pixels.
  final BoxConstraints? constraints;

  /* AUTOGENERATED FROM [CircularProgressIndicator.padding]*/
  /// The padding around the indicator track.
  ///
  /// If null, then the [ProgressIndicatorThemeData.circularTrackPadding] will be
  /// used. If that is null and [year2023] is false, then defaults to `EdgeInsets.all(4.0)`
  /// padding. Otherwise, defaults to zero padding.
  final EdgeInsetsGeometry? padding;

  final String? semanticsLabel;

  final String? semanticsValue;

  /* AUTOGENERATED FROM [CircularProgressIndicator.strokeAlign]*/
  /// The relative position of the stroke on a [CircularProgressIndicator].
  ///
  /// Values typically range from -1.0 ([strokeAlignInside], inside stroke)
  /// to 1.0 ([strokeAlignOutside], outside stroke),
  /// without any bound constraints (e.g., a value of -2.0 is not typical, but allowed).
  /// A value of 0 ([strokeAlignCenter]) will center the border
  /// on the edge of the widget.
  ///
  /// If [year2023] is true, then the default value is [strokeAlignCenter].
  /// Otherwise, the default value is [strokeAlignInside].
  final dynamic strokeAlign;

  /* AUTOGENERATED FROM [CircularProgressIndicator.strokeCap]*/
  /// The progress indicator's line ending.
  ///
  /// This determines the shape of the stroke ends of the progress indicator.
  /// By default, [strokeCap] is null.
  /// When [value] is null (indeterminate), the stroke ends are set to
  /// [StrokeCap.square]. When [value] is not null, the stroke
  /// ends are set to [StrokeCap.butt].
  ///
  /// Setting [strokeCap] to [StrokeCap.round] will result in a rounded end.
  /// Setting [strokeCap] to [StrokeCap.butt] with [value] == null will result
  /// in a slightly different indeterminate animation; the indicator completely
  /// disappears and reappears on its minimum value.
  /// Setting [strokeCap] to [StrokeCap.square] with [value] != null will
  /// result in a different display of [value]. The indicator will start
  /// drawing from slightly less than the start, and end slightly after
  /// the end. This will produce an alternative result, as the
  /// default behavior, for example, that a [value] of 0.5 starts at 90 degrees
  /// and ends at 270 degrees. With [StrokeCap.square], it could start 85
  /// degrees and end at 275 degrees.
  final StrokeCap? strokeCap;

  /* AUTOGENERATED FROM [CircularProgressIndicator.strokeWidth]*/
  /// The width of the line used to draw the circle.
  final double? strokeWidth;

  /* AUTOGENERATED FROM [CircularProgressIndicator.trackGap]*/
  /// The gap between the active indicator and the background track.
  ///
  /// If [year2023] is false or [ThemeData.useMaterial3] is false, then no track
  /// gap will be drawn.
  ///
  /// Set [trackGap] to 0 to hide the track gap.
  ///
  /// If null, then the [ProgressIndicatorThemeData.trackGap] will be used.
  /// If that is null, then defaults to 4.
  final double? trackGap;

  final double? value;

  final dynamic valueColor;

  /* AUTOGENERATED FROM [CircularProgressIndicator.year2023]*/
  /// When true, the [CircularProgressIndicator] will use the 2023 Material Design 3
  /// appearance.
  ///
  /// If null, then the [ProgressIndicatorThemeData.year2023] will be used.
  /// If that is null, then defaults to true.
  ///
  /// If this is set to false, the [CircularProgressIndicator] will use the
  /// latest Material Design 3 appearance, which was introduced in December 2023.
  ///
  /// If [ThemeData.useMaterial3] is false, then this property is ignored.
  final bool? year2023;

  static JsonCircularProgressIndicatorBuilderModel fromDynamic(
    dynamic map, {
    Map<String, dynamic> args = const {},
    JsonWidgetRegistry? registry,
  }) {
    final result = maybeFromDynamic(map, args: args, registry: registry);

    if (result == null) {
      throw Exception(
        '[JsonCircularProgressIndicatorBuilder]: requested to parse from dynamic, but the input is null.',
      );
    }

    return result;
  }

  static JsonCircularProgressIndicatorBuilderModel? maybeFromDynamic(
    dynamic map, {
    Map<String, dynamic> args = const {},
    JsonWidgetRegistry? registry,
  }) {
    JsonCircularProgressIndicatorBuilderModel? result;

    if (map != null) {
      if (map is String) {
        map = yaon.parse(map, normalize: true);
      }

      if (map is JsonCircularProgressIndicatorBuilderModel) {
        result = map;
      } else {
        registry ??= JsonWidgetRegistry.instance;
        map = registry.processArgs(map, <String>{}).value;
        result = JsonCircularProgressIndicatorBuilderModel(
          args,
          backgroundColor: () {
            dynamic parsed = ThemeDecoder.decodeColor(
              map['backgroundColor'],
              validate: false,
            );

            return parsed;
          }(),
          color: () {
            dynamic parsed = ThemeDecoder.decodeColor(
              map['color'],
              validate: false,
            );

            return parsed;
          }(),
          constraints: () {
            dynamic parsed = ThemeDecoder.decodeBoxConstraints(
              map['constraints'],
              validate: false,
            );

            return parsed;
          }(),
          padding: () {
            dynamic parsed = ThemeDecoder.decodeEdgeInsetsGeometry(
              map['padding'],
              validate: false,
            );

            return parsed;
          }(),
          semanticsLabel: map['semanticsLabel'],
          semanticsValue: map['semanticsValue'],
          strokeAlign:
              map['strokeAlign'] ?? CircularProgressIndicator.strokeAlignCenter,
          strokeCap: () {
            dynamic parsed = ThemeDecoder.decodeStrokeCap(
              map['strokeCap'],
              validate: false,
            );

            return parsed;
          }(),
          strokeWidth: () {
            dynamic parsed = JsonClass.maybeParseDouble(map['strokeWidth']);

            return parsed;
          }(),
          trackGap: () {
            dynamic parsed = JsonClass.maybeParseDouble(map['trackGap']);

            return parsed;
          }(),
          value: () {
            dynamic parsed = JsonClass.maybeParseDouble(map['value']);

            return parsed;
          }(),
          valueColor: map['valueColor'],
          year2023: JsonClass.maybeParseBool(map['year2023']),
        );
      }
    }

    return result;
  }

  @override
  Map<String, dynamic> toJson() {
    return JsonClass.removeNull({
      'backgroundColor': ThemeEncoder.encodeColor(backgroundColor),
      'color': ThemeEncoder.encodeColor(color),
      'constraints': ThemeEncoder.encodeBoxConstraints(constraints),
      'padding': ThemeEncoder.encodeEdgeInsetsGeometry(padding),
      'semanticsLabel': semanticsLabel,
      'semanticsValue': semanticsValue,
      'strokeAlign':
          CircularProgressIndicator.strokeAlignCenter == strokeAlign
              ? null
              : strokeAlign,
      'strokeCap': ThemeEncoder.encodeStrokeCap(strokeCap),
      'strokeWidth': strokeWidth,
      'trackGap': trackGap,
      'value': value,
      'valueColor': null == valueColor ? null : valueColor,
      'year2023': year2023,

      ...args,
    });
  }
}

class CircularProgressIndicatorSchema {
  static const id =
      'https://peiffer-innovations.github.io/flutter_json_schemas/schemas/json_dynamic_widget/circular_progress_indicator.json';

  static final schema = <String, Object>{
    r'$schema': 'http://json-schema.org/draft-07/schema#',
    r'$id': id,
    'title': 'CircularProgressIndicator',
    'type': 'object',
    'additionalProperties': false,
    'properties': {
      'backgroundColor': SchemaHelper.objectSchema(ColorSchema.id),
      'color': SchemaHelper.objectSchema(ColorSchema.id),
      'constraints': SchemaHelper.objectSchema(BoxConstraintsSchema.id),
      'padding': SchemaHelper.objectSchema(EdgeInsetsGeometrySchema.id),
      'semanticsLabel': SchemaHelper.stringSchema,
      'semanticsValue': SchemaHelper.stringSchema,
      'strokeAlign': SchemaHelper.numberSchema,
      'strokeCap': SchemaHelper.objectSchema(StrokeCapSchema.id),
      'strokeWidth': SchemaHelper.numberSchema,
      'trackGap': SchemaHelper.numberSchema,
      'value': SchemaHelper.numberSchema,
      'valueColor': SchemaHelper.anySchema,
      'year2023': SchemaHelper.boolSchema,
    },
    'required': [],
  };
}
