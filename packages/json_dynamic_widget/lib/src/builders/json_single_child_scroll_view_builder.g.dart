// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'json_single_child_scroll_view_builder.dart';

// **************************************************************************
// Generator: JsonWidgetLibraryBuilder
// **************************************************************************

// ignore_for_file: avoid_init_to_null
// ignore_for_file: deprecated_member_use

// ignore_for_file: prefer_const_constructors
// ignore_for_file: prefer_const_constructors_in_immutables
// ignore_for_file: prefer_final_locals
// ignore_for_file: prefer_if_null_operators
// ignore_for_file: prefer_single_quotes
// ignore_for_file: unused_local_variable

class JsonSingleChildScrollViewBuilder
    extends _JsonSingleChildScrollViewBuilder {
  const JsonSingleChildScrollViewBuilder({required super.args});

  static const kType = 'single_child_scroll_view';

  /// Constant that can be referenced for the builder's type.
  @override
  String get type => kType;

  /// Static function that is capable of decoding the widget from a dynamic JSON
  /// or YAML set of values.
  static JsonSingleChildScrollViewBuilder fromDynamic(
    dynamic map, {
    JsonWidgetRegistry? registry,
  }) => JsonSingleChildScrollViewBuilder(args: map);

  @override
  JsonSingleChildScrollViewBuilderModel createModel({
    ChildWidgetBuilder? childBuilder,
    required JsonWidgetData data,
  }) {
    final model = JsonSingleChildScrollViewBuilderModel.fromDynamic(
      args,
      registry: data.jsonWidgetRegistry,
    );

    return model;
  }

  @override
  SingleChildScrollView buildCustom({
    ChildWidgetBuilder? childBuilder,
    required BuildContext context,
    required JsonWidgetData data,
    Key? key,
  }) {
    final model = createModel(childBuilder: childBuilder, data: data);

    return SingleChildScrollView(
      clipBehavior: model.clipBehavior,
      controller: model.controller,
      dragStartBehavior: model.dragStartBehavior,
      hitTestBehavior: model.hitTestBehavior,
      key: key,
      keyboardDismissBehavior: model.keyboardDismissBehavior,
      padding: model.padding,
      physics: model.physics,
      primary: model.primary,
      restorationId: model.restorationId,
      reverse: model.reverse,
      scrollDirection: model.scrollDirection,
      child: model.child?.build(childBuilder: childBuilder, context: context),
    );
  }
}

class JsonSingleChildScrollView extends JsonWidgetData {
  JsonSingleChildScrollView({
    Map<String, dynamic> args = const {},
    JsonWidgetRegistry? registry,
    this.clipBehavior = Clip.hardEdge,
    this.controller,
    this.dragStartBehavior = DragStartBehavior.start,
    this.hitTestBehavior = HitTestBehavior.opaque,
    this.keyboardDismissBehavior,
    this.padding,
    this.physics,
    this.primary,
    this.restorationId,
    this.reverse = false,
    this.scrollDirection = Axis.vertical,
    this.child,
  }) : super(
         jsonWidgetArgs: JsonSingleChildScrollViewBuilderModel.fromDynamic(
           {
             'clipBehavior': clipBehavior,
             'controller': controller,
             'dragStartBehavior': dragStartBehavior,
             'hitTestBehavior': hitTestBehavior,
             'keyboardDismissBehavior': keyboardDismissBehavior,
             'padding': padding,
             'physics': physics,
             'primary': primary,
             'restorationId': restorationId,
             'reverse': reverse,
             'scrollDirection': scrollDirection,
             'child': child,

             ...args,
           },
           args: args,
           registry: registry,
         ),
         jsonWidgetBuilder:
             () => JsonSingleChildScrollViewBuilder(
               args: JsonSingleChildScrollViewBuilderModel.fromDynamic(
                 {
                   'clipBehavior': clipBehavior,
                   'controller': controller,
                   'dragStartBehavior': dragStartBehavior,
                   'hitTestBehavior': hitTestBehavior,
                   'keyboardDismissBehavior': keyboardDismissBehavior,
                   'padding': padding,
                   'physics': physics,
                   'primary': primary,
                   'restorationId': restorationId,
                   'reverse': reverse,
                   'scrollDirection': scrollDirection,
                   'child': child,

                   ...args,
                 },
                 args: args,
                 registry: registry,
               ),
             ),
         jsonWidgetType: JsonSingleChildScrollViewBuilder.kType,
       );

  /* AUTOGENERATED FROM [SingleChildScrollView.clipBehavior]*/
  /// {@macro flutter.material.Material.clipBehavior}
  ///
  /// Defaults to [Clip.hardEdge].
  final Clip clipBehavior;

  /* AUTOGENERATED FROM [SingleChildScrollView.controller]*/
  /// An object that can be used to control the position to which this scroll
  /// view is scrolled.
  ///
  /// Must be null if [primary] is true.
  ///
  /// A [ScrollController] serves several purposes. It can be used to control
  /// the initial scroll position (see [ScrollController.initialScrollOffset]).
  /// It can be used to control whether the scroll view should automatically
  /// save and restore its scroll position in the [PageStorage] (see
  /// [ScrollController.keepScrollOffset]). It can be used to read the current
  /// scroll position (see [ScrollController.offset]), or change it (see
  /// [ScrollController.animateTo]).
  final ScrollController? controller;

  /* AUTOGENERATED FROM [SingleChildScrollView.dragStartBehavior]*/
  /// {@macro flutter.widgets.scrollable.dragStartBehavior}
  final DragStartBehavior dragStartBehavior;

  /* AUTOGENERATED FROM [SingleChildScrollView.hitTestBehavior]*/
  /// {@macro flutter.widgets.scrollable.hitTestBehavior}
  ///
  /// Defaults to [HitTestBehavior.opaque].
  final HitTestBehavior hitTestBehavior;

  /* AUTOGENERATED FROM [SingleChildScrollView.keyboardDismissBehavior]*/
  /// {@macro flutter.widgets.scroll_view.keyboardDismissBehavior}
  ///
  /// If [keyboardDismissBehavior] is null then it will fallback to the inherited
  /// [ScrollBehavior.getKeyboardDismissBehavior].
  final ScrollViewKeyboardDismissBehavior? keyboardDismissBehavior;

  /* AUTOGENERATED FROM [SingleChildScrollView.padding]*/
  /// The amount of space by which to inset the child.
  final EdgeInsetsGeometry? padding;

  /* AUTOGENERATED FROM [SingleChildScrollView.physics]*/
  /// How the scroll view should respond to user input.
  ///
  /// For example, determines how the scroll view continues to animate after the
  /// user stops dragging the scroll view.
  ///
  /// Defaults to matching platform conventions.
  final ScrollPhysics? physics;

  /* AUTOGENERATED FROM [SingleChildScrollView.primary]*/
  /// {@macro flutter.widgets.scroll_view.primary}
  final bool? primary;

  /* AUTOGENERATED FROM [SingleChildScrollView.restorationId]*/
  /// {@macro flutter.widgets.scrollable.restorationId}
  final String? restorationId;

  /* AUTOGENERATED FROM [SingleChildScrollView.reverse]*/
  /// Whether the scroll view scrolls in the reading direction.
  ///
  /// For example, if the reading direction is left-to-right and
  /// [scrollDirection] is [Axis.horizontal], then the scroll view scrolls from
  /// left to right when [reverse] is false and from right to left when
  /// [reverse] is true.
  ///
  /// Similarly, if [scrollDirection] is [Axis.vertical], then the scroll view
  /// scrolls from top to bottom when [reverse] is false and from bottom to top
  /// when [reverse] is true.
  ///
  /// Defaults to false.
  final bool reverse;

  /* AUTOGENERATED FROM [SingleChildScrollView.scrollDirection]*/
  /// {@macro flutter.widgets.scroll_view.scrollDirection}
  final Axis scrollDirection;

  /* AUTOGENERATED FROM [SingleChildScrollView.child]*/
  /// The widget that scrolls.
  ///
  /// {@macro flutter.widgets.ProxyWidget.child}
  final JsonWidgetData? child;
}

/* AUTOGENERATED FROM [SingleChildScrollView]*/
/// Creates a box in which a single widget can be scrolled.
class JsonSingleChildScrollViewBuilderModel extends JsonWidgetBuilderModel {
  const JsonSingleChildScrollViewBuilderModel(
    super.args, {
    this.clipBehavior = Clip.hardEdge,
    this.controller,
    this.dragStartBehavior = DragStartBehavior.start,
    this.hitTestBehavior = HitTestBehavior.opaque,
    this.keyboardDismissBehavior,
    this.padding,
    this.physics,
    this.primary,
    this.restorationId,
    this.reverse = false,
    this.scrollDirection = Axis.vertical,
    this.child,
  });

  /* AUTOGENERATED FROM [SingleChildScrollView.clipBehavior]*/
  /// {@macro flutter.material.Material.clipBehavior}
  ///
  /// Defaults to [Clip.hardEdge].
  final Clip clipBehavior;

  /* AUTOGENERATED FROM [SingleChildScrollView.controller]*/
  /// An object that can be used to control the position to which this scroll
  /// view is scrolled.
  ///
  /// Must be null if [primary] is true.
  ///
  /// A [ScrollController] serves several purposes. It can be used to control
  /// the initial scroll position (see [ScrollController.initialScrollOffset]).
  /// It can be used to control whether the scroll view should automatically
  /// save and restore its scroll position in the [PageStorage] (see
  /// [ScrollController.keepScrollOffset]). It can be used to read the current
  /// scroll position (see [ScrollController.offset]), or change it (see
  /// [ScrollController.animateTo]).
  final ScrollController? controller;

  /* AUTOGENERATED FROM [SingleChildScrollView.dragStartBehavior]*/
  /// {@macro flutter.widgets.scrollable.dragStartBehavior}
  final DragStartBehavior dragStartBehavior;

  /* AUTOGENERATED FROM [SingleChildScrollView.hitTestBehavior]*/
  /// {@macro flutter.widgets.scrollable.hitTestBehavior}
  ///
  /// Defaults to [HitTestBehavior.opaque].
  final HitTestBehavior hitTestBehavior;

  /* AUTOGENERATED FROM [SingleChildScrollView.keyboardDismissBehavior]*/
  /// {@macro flutter.widgets.scroll_view.keyboardDismissBehavior}
  ///
  /// If [keyboardDismissBehavior] is null then it will fallback to the inherited
  /// [ScrollBehavior.getKeyboardDismissBehavior].
  final ScrollViewKeyboardDismissBehavior? keyboardDismissBehavior;

  /* AUTOGENERATED FROM [SingleChildScrollView.padding]*/
  /// The amount of space by which to inset the child.
  final EdgeInsetsGeometry? padding;

  /* AUTOGENERATED FROM [SingleChildScrollView.physics]*/
  /// How the scroll view should respond to user input.
  ///
  /// For example, determines how the scroll view continues to animate after the
  /// user stops dragging the scroll view.
  ///
  /// Defaults to matching platform conventions.
  final ScrollPhysics? physics;

  /* AUTOGENERATED FROM [SingleChildScrollView.primary]*/
  /// {@macro flutter.widgets.scroll_view.primary}
  final bool? primary;

  /* AUTOGENERATED FROM [SingleChildScrollView.restorationId]*/
  /// {@macro flutter.widgets.scrollable.restorationId}
  final String? restorationId;

  /* AUTOGENERATED FROM [SingleChildScrollView.reverse]*/
  /// Whether the scroll view scrolls in the reading direction.
  ///
  /// For example, if the reading direction is left-to-right and
  /// [scrollDirection] is [Axis.horizontal], then the scroll view scrolls from
  /// left to right when [reverse] is false and from right to left when
  /// [reverse] is true.
  ///
  /// Similarly, if [scrollDirection] is [Axis.vertical], then the scroll view
  /// scrolls from top to bottom when [reverse] is false and from bottom to top
  /// when [reverse] is true.
  ///
  /// Defaults to false.
  final bool reverse;

  /* AUTOGENERATED FROM [SingleChildScrollView.scrollDirection]*/
  /// {@macro flutter.widgets.scroll_view.scrollDirection}
  final Axis scrollDirection;

  /* AUTOGENERATED FROM [SingleChildScrollView.child]*/
  /// The widget that scrolls.
  ///
  /// {@macro flutter.widgets.ProxyWidget.child}
  final JsonWidgetData? child;

  static JsonSingleChildScrollViewBuilderModel fromDynamic(
    dynamic map, {
    Map<String, dynamic> args = const {},
    JsonWidgetRegistry? registry,
  }) {
    final result = maybeFromDynamic(map, args: args, registry: registry);

    if (result == null) {
      throw Exception(
        '[JsonSingleChildScrollViewBuilder]: requested to parse from dynamic, but the input is null.',
      );
    }

    return result;
  }

  static JsonSingleChildScrollViewBuilderModel? maybeFromDynamic(
    dynamic map, {
    Map<String, dynamic> args = const {},
    JsonWidgetRegistry? registry,
  }) {
    JsonSingleChildScrollViewBuilderModel? result;

    if (map != null) {
      if (map is String) {
        map = yaon.parse(map, normalize: true);
      }

      if (map is JsonSingleChildScrollViewBuilderModel) {
        result = map;
      } else {
        registry ??= JsonWidgetRegistry.instance;
        map = registry.processArgs(map, <String>{}).value;
        result = JsonSingleChildScrollViewBuilderModel(
          args,
          clipBehavior: () {
            dynamic parsed = ThemeDecoder.decodeClip(
              map['clipBehavior'],
              validate: false,
            );
            parsed ??= Clip.hardEdge;

            return parsed;
          }(),
          controller: map['controller'],
          dragStartBehavior: () {
            dynamic parsed = ThemeDecoder.decodeDragStartBehavior(
              map['dragStartBehavior'],
              validate: false,
            );
            parsed ??= DragStartBehavior.start;

            return parsed;
          }(),
          hitTestBehavior: () {
            dynamic parsed = ThemeDecoder.decodeHitTestBehavior(
              map['hitTestBehavior'],
              validate: false,
            );
            parsed ??= HitTestBehavior.opaque;

            return parsed;
          }(),
          keyboardDismissBehavior: () {
            dynamic parsed =
                ThemeDecoder.decodeScrollViewKeyboardDismissBehavior(
                  map['keyboardDismissBehavior'],
                  validate: false,
                );

            return parsed;
          }(),
          padding: () {
            dynamic parsed = ThemeDecoder.decodeEdgeInsetsGeometry(
              map['padding'],
              validate: false,
            );

            return parsed;
          }(),
          physics: () {
            dynamic parsed = ThemeDecoder.decodeScrollPhysics(
              map['physics'],
              validate: false,
            );

            return parsed;
          }(),
          primary: JsonClass.maybeParseBool(map['primary']),
          restorationId: map['restorationId'],
          reverse: JsonClass.parseBool(map['reverse'], whenNull: false),
          scrollDirection: () {
            dynamic parsed = ThemeDecoder.decodeAxis(
              map['scrollDirection'],
              validate: false,
            );
            parsed ??= Axis.vertical;

            return parsed;
          }(),
          child: () {
            dynamic parsed = JsonWidgetData.maybeFromDynamic(
              map['child'],
              registry: registry,
            );

            return parsed;
          }(),
        );
      }
    }

    return result;
  }

  @override
  Map<String, dynamic> toJson() {
    return JsonClass.removeNull({
      'clipBehavior':
          Clip.hardEdge == clipBehavior
              ? null
              : ThemeEncoder.encodeClip(clipBehavior),
      'controller': controller,
      'dragStartBehavior':
          DragStartBehavior.start == dragStartBehavior
              ? null
              : ThemeEncoder.encodeDragStartBehavior(dragStartBehavior),
      'hitTestBehavior':
          HitTestBehavior.opaque == hitTestBehavior
              ? null
              : ThemeEncoder.encodeHitTestBehavior(hitTestBehavior),
      'keyboardDismissBehavior':
          ThemeEncoder.encodeScrollViewKeyboardDismissBehavior(
            keyboardDismissBehavior,
          ),
      'padding': ThemeEncoder.encodeEdgeInsetsGeometry(padding),
      'physics': ThemeEncoder.encodeScrollPhysics(physics),
      'primary': primary,
      'restorationId': restorationId,
      'reverse': false == reverse ? null : reverse,
      'scrollDirection':
          Axis.vertical == scrollDirection
              ? null
              : ThemeEncoder.encodeAxis(scrollDirection),
      'child': child?.toJson(),

      ...args,
    });
  }
}

class SingleChildScrollViewSchema {
  static const id =
      'https://peiffer-innovations.github.io/flutter_json_schemas/schemas/json_dynamic_widget/single_child_scroll_view.json';

  static final schema = <String, Object>{
    r'$schema': 'http://json-schema.org/draft-07/schema#',
    r'$id': id,
    'title': 'SingleChildScrollView',
    'type': 'object',
    'additionalProperties': false,
    'properties': {
      'clipBehavior': SchemaHelper.objectSchema(ClipSchema.id),
      'controller': SchemaHelper.anySchema,
      'dragStartBehavior': SchemaHelper.objectSchema(
        DragStartBehaviorSchema.id,
      ),
      'hitTestBehavior': SchemaHelper.objectSchema(HitTestBehaviorSchema.id),
      'keyboardDismissBehavior': SchemaHelper.objectSchema(
        ScrollViewKeyboardDismissBehaviorSchema.id,
      ),
      'padding': SchemaHelper.objectSchema(EdgeInsetsGeometrySchema.id),
      'physics': SchemaHelper.objectSchema(ScrollPhysicsSchema.id),
      'primary': SchemaHelper.boolSchema,
      'restorationId': SchemaHelper.stringSchema,
      'reverse': SchemaHelper.boolSchema,
      'scrollDirection': SchemaHelper.objectSchema(AxisSchema.id),
      'child': SchemaHelper.objectSchema(JsonWidgetDataSchema.id),
    },
    'required': [],
  };
}
