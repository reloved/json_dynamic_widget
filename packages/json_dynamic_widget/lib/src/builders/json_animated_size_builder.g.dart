// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'json_animated_size_builder.dart';

// **************************************************************************
// Generator: JsonWidgetLibraryBuilder
// **************************************************************************

// ignore_for_file: avoid_init_to_null
// ignore_for_file: deprecated_member_use

// ignore_for_file: prefer_const_constructors
// ignore_for_file: prefer_const_constructors_in_immutables
// ignore_for_file: prefer_final_locals
// ignore_for_file: prefer_if_null_operators
// ignore_for_file: prefer_single_quotes
// ignore_for_file: unused_local_variable

class JsonAnimatedSizeBuilder extends _JsonAnimatedSizeBuilder {
  const JsonAnimatedSizeBuilder({required super.args});

  static const kType = 'animated_size';

  /// Constant that can be referenced for the builder's type.
  @override
  String get type => kType;

  /// Static function that is capable of decoding the widget from a dynamic JSON
  /// or YAML set of values.
  static JsonAnimatedSizeBuilder fromDynamic(
    dynamic map, {
    JsonWidgetRegistry? registry,
  }) => JsonAnimatedSizeBuilder(args: map);

  @override
  JsonAnimatedSizeBuilderModel createModel({
    ChildWidgetBuilder? childBuilder,
    required JsonWidgetData data,
  }) {
    final model = JsonAnimatedSizeBuilderModel.fromDynamic(
      args,
      registry: data.jsonWidgetRegistry,
    );

    return model;
  }

  @override
  AnimatedSize buildCustom({
    ChildWidgetBuilder? childBuilder,
    required BuildContext context,
    required JsonWidgetData data,
    Key? key,
  }) {
    final model = createModel(childBuilder: childBuilder, data: data);

    return AnimatedSize(
      alignment: model.alignment,
      clipBehavior: model.clipBehavior,
      curve: model.curve,
      duration: model.duration,
      key: key,
      onEnd: model.onEnd,
      reverseDuration: model.reverseDuration,
      child: model.child?.build(childBuilder: childBuilder, context: context),
    );
  }
}

class JsonAnimatedSize extends JsonWidgetData {
  JsonAnimatedSize({
    Map<String, dynamic> args = const {},
    JsonWidgetRegistry? registry,
    this.alignment = Alignment.center,
    this.clipBehavior = Clip.hardEdge,
    this.curve = Curves.linear,
    required this.duration,
    this.onEnd,
    this.reverseDuration,
    this.child,
  }) : super(
         jsonWidgetArgs: JsonAnimatedSizeBuilderModel.fromDynamic(
           {
             'alignment': alignment,
             'clipBehavior': clipBehavior,
             'curve': curve,
             'duration': duration,
             'onEnd': onEnd,
             'reverseDuration': reverseDuration,
             'child': child,

             ...args,
           },
           args: args,
           registry: registry,
         ),
         jsonWidgetBuilder:
             () => JsonAnimatedSizeBuilder(
               args: JsonAnimatedSizeBuilderModel.fromDynamic(
                 {
                   'alignment': alignment,
                   'clipBehavior': clipBehavior,
                   'curve': curve,
                   'duration': duration,
                   'onEnd': onEnd,
                   'reverseDuration': reverseDuration,
                   'child': child,

                   ...args,
                 },
                 args: args,
                 registry: registry,
               ),
             ),
         jsonWidgetType: JsonAnimatedSizeBuilder.kType,
       );

  /* AUTOGENERATED FROM [AnimatedSize.alignment]*/
  /// The alignment of the child within the parent when the parent is not yet
  /// the same size as the child.
  ///
  /// The x and y values of the alignment control the horizontal and vertical
  /// alignment, respectively. An x value of -1.0 means that the left edge of
  /// the child is aligned with the left edge of the parent whereas an x value
  /// of 1.0 means that the right edge of the child is aligned with the right
  /// edge of the parent. Other values interpolate (and extrapolate) linearly.
  /// For example, a value of 0.0 means that the center of the child is aligned
  /// with the center of the parent.
  ///
  /// Defaults to [Alignment.center].
  ///
  /// See also:
  ///
  ///  * [Alignment], a class with convenient constants typically used to
  ///    specify an [AlignmentGeometry].
  ///  * [AlignmentDirectional], like [Alignment] for specifying alignments
  ///    relative to text direction.
  final AlignmentGeometry alignment;

  /* AUTOGENERATED FROM [AnimatedSize.clipBehavior]*/
  /// {@macro flutter.material.Material.clipBehavior}
  ///
  /// Defaults to [Clip.hardEdge].
  final Clip clipBehavior;

  /* AUTOGENERATED FROM [AnimatedSize.curve]*/
  /// The animation curve when transitioning this widget's size to match the
  /// child's size.
  final Curve curve;

  /* AUTOGENERATED FROM [AnimatedSize.duration]*/
  /// The duration when transitioning this widget's size to match the child's
  /// size.
  final Duration duration;

  /* AUTOGENERATED FROM [AnimatedSize.onEnd]*/
  /// Called every time an animation completes.
  ///
  /// This can be useful to trigger additional actions (e.g. another animation)
  /// at the end of the current animation.
  final void Function()? onEnd;

  /* AUTOGENERATED FROM [AnimatedSize.reverseDuration]*/
  /// The duration when transitioning this widget's size to match the child's
  /// size when going in reverse.
  ///
  /// If not specified, defaults to [duration].
  final Duration? reverseDuration;

  /* AUTOGENERATED FROM [AnimatedSize.child]*/
  /// The widget below this widget in the tree.
  ///
  /// {@macro flutter.widgets.ProxyWidget.child}
  final JsonWidgetData? child;
}

/* AUTOGENERATED FROM [AnimatedSize]*/
/// Creates a widget that animates its size to match that of its child.
class JsonAnimatedSizeBuilderModel extends JsonWidgetBuilderModel {
  const JsonAnimatedSizeBuilderModel(
    super.args, {
    this.alignment = Alignment.center,
    this.clipBehavior = Clip.hardEdge,
    this.curve = Curves.linear,
    required this.duration,
    this.onEnd,
    this.reverseDuration,
    this.child,
  });

  /* AUTOGENERATED FROM [AnimatedSize.alignment]*/
  /// The alignment of the child within the parent when the parent is not yet
  /// the same size as the child.
  ///
  /// The x and y values of the alignment control the horizontal and vertical
  /// alignment, respectively. An x value of -1.0 means that the left edge of
  /// the child is aligned with the left edge of the parent whereas an x value
  /// of 1.0 means that the right edge of the child is aligned with the right
  /// edge of the parent. Other values interpolate (and extrapolate) linearly.
  /// For example, a value of 0.0 means that the center of the child is aligned
  /// with the center of the parent.
  ///
  /// Defaults to [Alignment.center].
  ///
  /// See also:
  ///
  ///  * [Alignment], a class with convenient constants typically used to
  ///    specify an [AlignmentGeometry].
  ///  * [AlignmentDirectional], like [Alignment] for specifying alignments
  ///    relative to text direction.
  final AlignmentGeometry alignment;

  /* AUTOGENERATED FROM [AnimatedSize.clipBehavior]*/
  /// {@macro flutter.material.Material.clipBehavior}
  ///
  /// Defaults to [Clip.hardEdge].
  final Clip clipBehavior;

  /* AUTOGENERATED FROM [AnimatedSize.curve]*/
  /// The animation curve when transitioning this widget's size to match the
  /// child's size.
  final Curve curve;

  /* AUTOGENERATED FROM [AnimatedSize.duration]*/
  /// The duration when transitioning this widget's size to match the child's
  /// size.
  final Duration duration;

  /* AUTOGENERATED FROM [AnimatedSize.onEnd]*/
  /// Called every time an animation completes.
  ///
  /// This can be useful to trigger additional actions (e.g. another animation)
  /// at the end of the current animation.
  final void Function()? onEnd;

  /* AUTOGENERATED FROM [AnimatedSize.reverseDuration]*/
  /// The duration when transitioning this widget's size to match the child's
  /// size when going in reverse.
  ///
  /// If not specified, defaults to [duration].
  final Duration? reverseDuration;

  /* AUTOGENERATED FROM [AnimatedSize.child]*/
  /// The widget below this widget in the tree.
  ///
  /// {@macro flutter.widgets.ProxyWidget.child}
  final JsonWidgetData? child;

  static JsonAnimatedSizeBuilderModel fromDynamic(
    dynamic map, {
    Map<String, dynamic> args = const {},
    JsonWidgetRegistry? registry,
  }) {
    final result = maybeFromDynamic(map, args: args, registry: registry);

    if (result == null) {
      throw Exception(
        '[JsonAnimatedSizeBuilder]: requested to parse from dynamic, but the input is null.',
      );
    }

    return result;
  }

  static JsonAnimatedSizeBuilderModel? maybeFromDynamic(
    dynamic map, {
    Map<String, dynamic> args = const {},
    JsonWidgetRegistry? registry,
  }) {
    JsonAnimatedSizeBuilderModel? result;

    if (map != null) {
      if (map is String) {
        map = yaon.parse(map, normalize: true);
      }

      if (map is JsonAnimatedSizeBuilderModel) {
        result = map;
      } else {
        registry ??= JsonWidgetRegistry.instance;
        map = registry.processArgs(map, <String>{}).value;
        result = JsonAnimatedSizeBuilderModel(
          args,
          alignment: () {
            dynamic parsed = ThemeDecoder.decodeAlignmentGeometry(
              map['alignment'],
              validate: false,
            );
            parsed ??= Alignment.center;

            return parsed;
          }(),
          clipBehavior: () {
            dynamic parsed = ThemeDecoder.decodeClip(
              map['clipBehavior'],
              validate: false,
            );
            parsed ??= Clip.hardEdge;

            return parsed;
          }(),
          curve: () {
            dynamic parsed = CurvesValues.lookup(map['curve']);

            parsed ??= Curves.linear;

            return parsed;
          }(),
          duration: () {
            dynamic parsed = JsonClass.parseDurationFromMillis(map['duration']);

            if (parsed == null) {
              throw Exception(
                'Null value encountered for required parameter: [duration].',
              );
            }
            return parsed;
          }(),
          onEnd: map['onEnd'],
          reverseDuration: () {
            dynamic parsed = JsonClass.maybeParseDurationFromMillis(
              map['reverseDuration'],
            );

            return parsed;
          }(),
          child: () {
            dynamic parsed = JsonWidgetData.maybeFromDynamic(
              map['child'],
              registry: registry,
            );

            return parsed;
          }(),
        );
      }
    }

    return result;
  }

  @override
  Map<String, dynamic> toJson() {
    return JsonClass.removeNull({
      'alignment':
          Alignment.center == alignment
              ? null
              : ThemeEncoder.encodeAlignmentGeometry(alignment),
      'clipBehavior':
          Clip.hardEdge == clipBehavior
              ? null
              : ThemeEncoder.encodeClip(clipBehavior),
      'curve': Curves.linear == curve ? null : CurvesValues.encode(curve),
      'duration': duration.inMilliseconds,
      'onEnd': onEnd,
      'reverseDuration': reverseDuration?.inMilliseconds,
      'child': child?.toJson(),

      ...args,
    });
  }
}

class AnimatedSizeSchema {
  static const id =
      'https://peiffer-innovations.github.io/flutter_json_schemas/schemas/json_dynamic_widget/animated_size.json';

  static final schema = <String, Object>{
    r'$schema': 'http://json-schema.org/draft-07/schema#',
    r'$id': id,
    'title': 'AnimatedSize',
    'type': 'object',
    'additionalProperties': false,
    'properties': {
      'alignment': SchemaHelper.objectSchema(AlignmentGeometrySchema.id),
      'clipBehavior': SchemaHelper.objectSchema(ClipSchema.id),
      'curve': SchemaHelper.anySchema,
      'duration': SchemaHelper.anySchema,
      'onEnd': SchemaHelper.anySchema,
      'reverseDuration': SchemaHelper.anySchema,
      'child': SchemaHelper.objectSchema(JsonWidgetDataSchema.id),
    },
    'required': ['duration'],
  };
}
