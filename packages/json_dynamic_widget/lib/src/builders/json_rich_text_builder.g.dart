// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'json_rich_text_builder.dart';

// **************************************************************************
// Generator: JsonWidgetLibraryBuilder
// **************************************************************************

// ignore_for_file: avoid_init_to_null
// ignore_for_file: deprecated_member_use

// ignore_for_file: prefer_const_constructors
// ignore_for_file: prefer_const_constructors_in_immutables
// ignore_for_file: prefer_final_locals
// ignore_for_file: prefer_if_null_operators
// ignore_for_file: prefer_single_quotes
// ignore_for_file: unused_local_variable

class JsonRichTextBuilder extends _JsonRichTextBuilder {
  const JsonRichTextBuilder({required super.args});

  static const kType = 'rich_text';

  /// Constant that can be referenced for the builder's type.
  @override
  String get type => kType;

  /// Static function that is capable of decoding the widget from a dynamic JSON
  /// or YAML set of values.
  static JsonRichTextBuilder fromDynamic(
    dynamic map, {
    JsonWidgetRegistry? registry,
  }) => JsonRichTextBuilder(args: map);

  @override
  JsonRichTextBuilderModel createModel({
    ChildWidgetBuilder? childBuilder,
    required JsonWidgetData data,
  }) {
    final model = JsonRichTextBuilderModel.fromDynamic(
      args,
      registry: data.jsonWidgetRegistry,
    );

    return model;
  }

  @override
  RichText buildCustom({
    ChildWidgetBuilder? childBuilder,
    required BuildContext context,
    required JsonWidgetData data,
    Key? key,
  }) {
    final model = createModel(childBuilder: childBuilder, data: data);

    final textDecoded = _decodeText(value: model.text);

    return RichText(
      key: key,
      locale: model.locale,
      maxLines: model.maxLines,
      overflow: model.overflow,
      selectionColor: model.selectionColor,
      selectionRegistrar: model.selectionRegistrar,
      softWrap: model.softWrap,
      strutStyle: model.strutStyle,
      text: textDecoded,
      textAlign: model.textAlign,
      textDirection: model.textDirection,
      textHeightBehavior: model.textHeightBehavior,
      textScaleFactor: model.textScaleFactor,
      textScaler: model.textScaler,
      textWidthBasis: model.textWidthBasis,
    );
  }
}

class JsonRichText extends JsonWidgetData {
  JsonRichText({
    Map<String, dynamic> args = const {},
    JsonWidgetRegistry? registry,
    this.locale,
    this.maxLines,
    this.overflow = TextOverflow.clip,
    this.selectionColor,
    this.selectionRegistrar,
    this.softWrap = true,
    this.strutStyle,
    required this.text,
    this.textAlign = TextAlign.start,
    this.textDirection,
    this.textHeightBehavior,
    this.textScaleFactor = 1.0,
    this.textScaler = TextScaler.noScaling,
    this.textWidthBasis = TextWidthBasis.parent,
  }) : super(
         jsonWidgetArgs: JsonRichTextBuilderModel.fromDynamic(
           {
             'locale': locale,
             'maxLines': maxLines,
             'overflow': overflow,
             'selectionColor': selectionColor,
             'selectionRegistrar': selectionRegistrar,
             'softWrap': softWrap,
             'strutStyle': strutStyle,
             'text': text,
             'textAlign': textAlign,
             'textDirection': textDirection,
             'textHeightBehavior': textHeightBehavior,
             'textScaleFactor': textScaleFactor,
             'textScaler': textScaler,
             'textWidthBasis': textWidthBasis,

             ...args,
           },
           args: args,
           registry: registry,
         ),
         jsonWidgetBuilder:
             () => JsonRichTextBuilder(
               args: JsonRichTextBuilderModel.fromDynamic(
                 {
                   'locale': locale,
                   'maxLines': maxLines,
                   'overflow': overflow,
                   'selectionColor': selectionColor,
                   'selectionRegistrar': selectionRegistrar,
                   'softWrap': softWrap,
                   'strutStyle': strutStyle,
                   'text': text,
                   'textAlign': textAlign,
                   'textDirection': textDirection,
                   'textHeightBehavior': textHeightBehavior,
                   'textScaleFactor': textScaleFactor,
                   'textScaler': textScaler,
                   'textWidthBasis': textWidthBasis,

                   ...args,
                 },
                 args: args,
                 registry: registry,
               ),
             ),
         jsonWidgetType: JsonRichTextBuilder.kType,
       );

  /* AUTOGENERATED FROM [RichText.locale]*/
  /// Used to select a font when the same Unicode character can
  /// be rendered differently, depending on the locale.
  ///
  /// It's rarely necessary to set this property. By default its value
  /// is inherited from the enclosing app with `Localizations.localeOf(context)`.
  ///
  /// See [RenderParagraph.locale] for more information.
  final Locale? locale;

  /* AUTOGENERATED FROM [RichText.maxLines]*/
  /// An optional maximum number of lines for the text to span, wrapping if necessary.
  /// If the text exceeds the given number of lines, it will be truncated according
  /// to [overflow].
  ///
  /// If this is 1, text will not wrap. Otherwise, text will be wrapped at the
  /// edge of the box.
  final int? maxLines;

  /* AUTOGENERATED FROM [RichText.overflow]*/
  /// How visual overflow should be handled.
  final TextOverflow overflow;

  /* AUTOGENERATED FROM [RichText.selectionColor]*/
  /// The color to use when painting the selection.
  ///
  /// This is ignored if [selectionRegistrar] is null.
  ///
  /// See the section on selections in the [RichText] top-level API
  /// documentation for more details on enabling selection in [RichText]
  /// widgets.
  final Color? selectionColor;

  /* AUTOGENERATED FROM [RichText.selectionRegistrar]*/
  /// The [SelectionRegistrar] this rich text is subscribed to.
  ///
  /// If this is set, [selectionColor] must be non-null.
  final SelectionRegistrar? selectionRegistrar;

  /* AUTOGENERATED FROM [RichText.softWrap]*/
  /// Whether the text should break at soft line breaks.
  ///
  /// If false, the glyphs in the text will be positioned as if there was unlimited horizontal space.
  final bool softWrap;

  /* AUTOGENERATED FROM [RichText.strutStyle]*/
  /// {@macro flutter.painting.textPainter.strutStyle}
  final StrutStyle? strutStyle;

  /* AUTOGENERATED FROM [RichText.text]*/
  /// The text to display in this widget.
  final dynamic text;

  /* AUTOGENERATED FROM [RichText.textAlign]*/
  /// How the text should be aligned horizontally.
  final TextAlign textAlign;

  /* AUTOGENERATED FROM [RichText.textDirection]*/
  /// The directionality of the text.
  ///
  /// This decides how [textAlign] values like [TextAlign.start] and
  /// [TextAlign.end] are interpreted.
  ///
  /// This is also used to disambiguate how to render bidirectional text. For
  /// example, if the [text] is an English phrase followed by a Hebrew phrase,
  /// in a [TextDirection.ltr] context the English phrase will be on the left
  /// and the Hebrew phrase to its right, while in a [TextDirection.rtl]
  /// context, the English phrase will be on the right and the Hebrew phrase on
  /// its left.
  ///
  /// Defaults to the ambient [Directionality], if any. If there is no ambient
  /// [Directionality], then this must not be null.
  final TextDirection? textDirection;

  /* AUTOGENERATED FROM [RichText.textHeightBehavior]*/
  /// {@macro dart.ui.textHeightBehavior}
  final TextHeightBehavior? textHeightBehavior;

  final double textScaleFactor;

  /* AUTOGENERATED FROM [RichText.textScaler]*/
  /// {@macro flutter.painting.textPainter.textScaler}
  final TextScaler textScaler;

  /* AUTOGENERATED FROM [RichText.textWidthBasis]*/
  /// {@macro flutter.painting.textPainter.textWidthBasis}
  final TextWidthBasis textWidthBasis;
}

/* AUTOGENERATED FROM [RichText]*/
/// Creates a paragraph of rich text.
///
/// The [maxLines] property may be null (and indeed defaults to null), but if
/// it is not null, it must be greater than zero.
///
/// The [textDirection], if null, defaults to the ambient [Directionality],
/// which in that case must not be null.
class JsonRichTextBuilderModel extends JsonWidgetBuilderModel {
  const JsonRichTextBuilderModel(
    super.args, {
    this.locale,
    this.maxLines,
    this.overflow = TextOverflow.clip,
    this.selectionColor,
    this.selectionRegistrar,
    this.softWrap = true,
    this.strutStyle,
    required this.text,
    this.textAlign = TextAlign.start,
    this.textDirection,
    this.textHeightBehavior,
    this.textScaleFactor = 1.0,
    this.textScaler = TextScaler.noScaling,
    this.textWidthBasis = TextWidthBasis.parent,
  });

  /* AUTOGENERATED FROM [RichText.locale]*/
  /// Used to select a font when the same Unicode character can
  /// be rendered differently, depending on the locale.
  ///
  /// It's rarely necessary to set this property. By default its value
  /// is inherited from the enclosing app with `Localizations.localeOf(context)`.
  ///
  /// See [RenderParagraph.locale] for more information.
  final Locale? locale;

  /* AUTOGENERATED FROM [RichText.maxLines]*/
  /// An optional maximum number of lines for the text to span, wrapping if necessary.
  /// If the text exceeds the given number of lines, it will be truncated according
  /// to [overflow].
  ///
  /// If this is 1, text will not wrap. Otherwise, text will be wrapped at the
  /// edge of the box.
  final int? maxLines;

  /* AUTOGENERATED FROM [RichText.overflow]*/
  /// How visual overflow should be handled.
  final TextOverflow overflow;

  /* AUTOGENERATED FROM [RichText.selectionColor]*/
  /// The color to use when painting the selection.
  ///
  /// This is ignored if [selectionRegistrar] is null.
  ///
  /// See the section on selections in the [RichText] top-level API
  /// documentation for more details on enabling selection in [RichText]
  /// widgets.
  final Color? selectionColor;

  /* AUTOGENERATED FROM [RichText.selectionRegistrar]*/
  /// The [SelectionRegistrar] this rich text is subscribed to.
  ///
  /// If this is set, [selectionColor] must be non-null.
  final SelectionRegistrar? selectionRegistrar;

  /* AUTOGENERATED FROM [RichText.softWrap]*/
  /// Whether the text should break at soft line breaks.
  ///
  /// If false, the glyphs in the text will be positioned as if there was unlimited horizontal space.
  final bool softWrap;

  /* AUTOGENERATED FROM [RichText.strutStyle]*/
  /// {@macro flutter.painting.textPainter.strutStyle}
  final StrutStyle? strutStyle;

  /* AUTOGENERATED FROM [RichText.text]*/
  /// The text to display in this widget.
  final dynamic text;

  /* AUTOGENERATED FROM [RichText.textAlign]*/
  /// How the text should be aligned horizontally.
  final TextAlign textAlign;

  /* AUTOGENERATED FROM [RichText.textDirection]*/
  /// The directionality of the text.
  ///
  /// This decides how [textAlign] values like [TextAlign.start] and
  /// [TextAlign.end] are interpreted.
  ///
  /// This is also used to disambiguate how to render bidirectional text. For
  /// example, if the [text] is an English phrase followed by a Hebrew phrase,
  /// in a [TextDirection.ltr] context the English phrase will be on the left
  /// and the Hebrew phrase to its right, while in a [TextDirection.rtl]
  /// context, the English phrase will be on the right and the Hebrew phrase on
  /// its left.
  ///
  /// Defaults to the ambient [Directionality], if any. If there is no ambient
  /// [Directionality], then this must not be null.
  final TextDirection? textDirection;

  /* AUTOGENERATED FROM [RichText.textHeightBehavior]*/
  /// {@macro dart.ui.textHeightBehavior}
  final TextHeightBehavior? textHeightBehavior;

  final double textScaleFactor;

  /* AUTOGENERATED FROM [RichText.textScaler]*/
  /// {@macro flutter.painting.textPainter.textScaler}
  final TextScaler textScaler;

  /* AUTOGENERATED FROM [RichText.textWidthBasis]*/
  /// {@macro flutter.painting.textPainter.textWidthBasis}
  final TextWidthBasis textWidthBasis;

  static JsonRichTextBuilderModel fromDynamic(
    dynamic map, {
    Map<String, dynamic> args = const {},
    JsonWidgetRegistry? registry,
  }) {
    final result = maybeFromDynamic(map, args: args, registry: registry);

    if (result == null) {
      throw Exception(
        '[JsonRichTextBuilder]: requested to parse from dynamic, but the input is null.',
      );
    }

    return result;
  }

  static JsonRichTextBuilderModel? maybeFromDynamic(
    dynamic map, {
    Map<String, dynamic> args = const {},
    JsonWidgetRegistry? registry,
  }) {
    JsonRichTextBuilderModel? result;

    if (map != null) {
      if (map is String) {
        map = yaon.parse(map, normalize: true);
      }

      if (map is JsonRichTextBuilderModel) {
        result = map;
      } else {
        registry ??= JsonWidgetRegistry.instance;
        map = registry.processArgs(map, <String>{}).value;
        result = JsonRichTextBuilderModel(
          args,
          locale: () {
            dynamic parsed = ThemeDecoder.decodeLocale(
              map['locale'],
              validate: false,
            );

            return parsed;
          }(),
          maxLines: () {
            dynamic parsed = JsonClass.maybeParseInt(map['maxLines']);

            return parsed;
          }(),
          overflow: () {
            dynamic parsed = ThemeDecoder.decodeTextOverflow(
              map['overflow'],
              validate: false,
            );
            parsed ??= TextOverflow.clip;

            return parsed;
          }(),
          selectionColor: () {
            dynamic parsed = ThemeDecoder.decodeColor(
              map['selectionColor'],
              validate: false,
            );

            return parsed;
          }(),
          selectionRegistrar: map['selectionRegistrar'],
          softWrap: JsonClass.parseBool(map['softWrap'], whenNull: true),
          strutStyle: () {
            dynamic parsed = ThemeDecoder.decodeStrutStyle(
              map['strutStyle'],
              validate: false,
            );

            return parsed;
          }(),
          text: map['text'],
          textAlign: () {
            dynamic parsed = ThemeDecoder.decodeTextAlign(
              map['textAlign'],
              validate: false,
            );
            parsed ??= TextAlign.start;

            return parsed;
          }(),
          textDirection: () {
            dynamic parsed = ThemeDecoder.decodeTextDirection(
              map['textDirection'],
              validate: false,
            );

            return parsed;
          }(),
          textHeightBehavior: () {
            dynamic parsed = ThemeDecoder.decodeTextHeightBehavior(
              map['textHeightBehavior'],
              validate: false,
            );

            return parsed;
          }(),
          textScaleFactor: () {
            dynamic parsed = JsonClass.maybeParseDouble(map['textScaleFactor']);

            parsed ??= 1.0;

            return parsed;
          }(),
          textScaler: () {
            dynamic parsed = ThemeDecoder.decodeTextScaler(
              map['textScaler'],
              validate: false,
            );
            parsed ??= TextScaler.noScaling;

            return parsed;
          }(),
          textWidthBasis: () {
            dynamic parsed = ThemeDecoder.decodeTextWidthBasis(
              map['textWidthBasis'],
              validate: false,
            );
            parsed ??= TextWidthBasis.parent;

            return parsed;
          }(),
        );
      }
    }

    return result;
  }

  @override
  Map<String, dynamic> toJson() {
    return JsonClass.removeNull({
      'locale': ThemeEncoder.encodeLocale(locale),
      'maxLines': maxLines,
      'overflow':
          TextOverflow.clip == overflow
              ? null
              : ThemeEncoder.encodeTextOverflow(overflow),
      'selectionColor': ThemeEncoder.encodeColor(selectionColor),
      'selectionRegistrar': selectionRegistrar,
      'softWrap': true == softWrap ? null : softWrap,
      'strutStyle': ThemeEncoder.encodeStrutStyle(strutStyle),
      'text': text,
      'textAlign':
          TextAlign.start == textAlign
              ? null
              : ThemeEncoder.encodeTextAlign(textAlign),
      'textDirection': ThemeEncoder.encodeTextDirection(textDirection),
      'textHeightBehavior': ThemeEncoder.encodeTextHeightBehavior(
        textHeightBehavior,
      ),
      'textScaleFactor': 1.0 == textScaleFactor ? null : textScaleFactor,
      'textScaler':
          TextScaler.noScaling == textScaler
              ? null
              : ThemeEncoder.encodeTextScaler(textScaler),
      'textWidthBasis':
          TextWidthBasis.parent == textWidthBasis
              ? null
              : ThemeEncoder.encodeTextWidthBasis(textWidthBasis),

      ...args,
    });
  }
}

class RichTextSchema {
  static const id =
      'https://peiffer-innovations.github.io/flutter_json_schemas/schemas/json_dynamic_widget/rich_text.json';

  static final schema = <String, Object>{
    r'$schema': 'http://json-schema.org/draft-07/schema#',
    r'$id': id,
    'title': 'RichText',
    'type': 'object',
    'additionalProperties': false,
    'properties': {
      'locale': SchemaHelper.objectSchema(LocaleSchema.id),
      'maxLines': SchemaHelper.numberSchema,
      'overflow': SchemaHelper.objectSchema(TextOverflowSchema.id),
      'selectionColor': SchemaHelper.objectSchema(ColorSchema.id),
      'selectionRegistrar': SchemaHelper.anySchema,
      'softWrap': SchemaHelper.boolSchema,
      'strutStyle': SchemaHelper.objectSchema(StrutStyleSchema.id),
      'text': SchemaHelper.anySchema,
      'textAlign': SchemaHelper.objectSchema(TextAlignSchema.id),
      'textDirection': SchemaHelper.objectSchema(TextDirectionSchema.id),
      'textHeightBehavior': SchemaHelper.objectSchema(
        TextHeightBehaviorSchema.id,
      ),
      'textScaleFactor': SchemaHelper.numberSchema,
      'textScaler': SchemaHelper.objectSchema(TextScalerSchema.id),
      'textWidthBasis': SchemaHelper.objectSchema(TextWidthBasisSchema.id),
    },
    'required': ['text'],
  };
}
