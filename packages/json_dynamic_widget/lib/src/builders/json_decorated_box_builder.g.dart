// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'json_decorated_box_builder.dart';

// **************************************************************************
// Generator: JsonWidgetLibraryBuilder
// **************************************************************************

// ignore_for_file: avoid_init_to_null
// ignore_for_file: deprecated_member_use

// ignore_for_file: prefer_const_constructors
// ignore_for_file: prefer_const_constructors_in_immutables
// ignore_for_file: prefer_final_locals
// ignore_for_file: prefer_if_null_operators
// ignore_for_file: prefer_single_quotes
// ignore_for_file: unused_local_variable

class JsonDecoratedBoxBuilder extends _JsonDecoratedBoxBuilder {
  const JsonDecoratedBoxBuilder({required super.args});

  static const kType = 'decorated_box';

  /// Constant that can be referenced for the builder's type.
  @override
  String get type => kType;

  /// Static function that is capable of decoding the widget from a dynamic JSON
  /// or YAML set of values.
  static JsonDecoratedBoxBuilder fromDynamic(
    dynamic map, {
    JsonWidgetRegistry? registry,
  }) => JsonDecoratedBoxBuilder(args: map);

  @override
  JsonDecoratedBoxBuilderModel createModel({
    ChildWidgetBuilder? childBuilder,
    required JsonWidgetData data,
  }) {
    final model = JsonDecoratedBoxBuilderModel.fromDynamic(
      args,
      registry: data.jsonWidgetRegistry,
    );

    return model;
  }

  @override
  DecoratedBox buildCustom({
    ChildWidgetBuilder? childBuilder,
    required BuildContext context,
    required JsonWidgetData data,
    Key? key,
  }) {
    final model = createModel(childBuilder: childBuilder, data: data);

    final decorationDecoded = _decodeDecoration(value: model.decoration);
    final positionDecoded = _decodePosition(value: model.position);

    return DecoratedBox(
      decoration: decorationDecoded,
      key: key,
      position: positionDecoded,
      child: model.child?.build(childBuilder: childBuilder, context: context),
    );
  }
}

class JsonDecoratedBox extends JsonWidgetData {
  JsonDecoratedBox({
    Map<String, dynamic> args = const {},
    JsonWidgetRegistry? registry,
    required this.decoration,
    required this.position,
    this.child,
  }) : super(
         jsonWidgetArgs: JsonDecoratedBoxBuilderModel.fromDynamic(
           {
             'decoration': decoration,
             'position': position,
             'child': child,

             ...args,
           },
           args: args,
           registry: registry,
         ),
         jsonWidgetBuilder:
             () => JsonDecoratedBoxBuilder(
               args: JsonDecoratedBoxBuilderModel.fromDynamic(
                 {
                   'decoration': decoration,
                   'position': position,
                   'child': child,

                   ...args,
                 },
                 args: args,
                 registry: registry,
               ),
             ),
         jsonWidgetType: JsonDecoratedBoxBuilder.kType,
       );

  /* AUTOGENERATED FROM [DecoratedBox.decoration]*/
  /// What decoration to paint.
  ///
  /// Commonly a [BoxDecoration].
  final dynamic decoration;

  /* AUTOGENERATED FROM [DecoratedBox.position]*/
  /// Whether to paint the box decoration behind or in front of the child.
  final dynamic position;

  final JsonWidgetData? child;
}

/* AUTOGENERATED FROM [DecoratedBox]*/
/// Creates a widget that paints a [Decoration].
///
/// By default the decoration paints behind the child.
class JsonDecoratedBoxBuilderModel extends JsonWidgetBuilderModel {
  const JsonDecoratedBoxBuilderModel(
    super.args, {
    required this.decoration,
    required this.position,
    this.child,
  });

  /* AUTOGENERATED FROM [DecoratedBox.decoration]*/
  /// What decoration to paint.
  ///
  /// Commonly a [BoxDecoration].
  final dynamic decoration;

  /* AUTOGENERATED FROM [DecoratedBox.position]*/
  /// Whether to paint the box decoration behind or in front of the child.
  final dynamic position;

  final JsonWidgetData? child;

  static JsonDecoratedBoxBuilderModel fromDynamic(
    dynamic map, {
    Map<String, dynamic> args = const {},
    JsonWidgetRegistry? registry,
  }) {
    final result = maybeFromDynamic(map, args: args, registry: registry);

    if (result == null) {
      throw Exception(
        '[JsonDecoratedBoxBuilder]: requested to parse from dynamic, but the input is null.',
      );
    }

    return result;
  }

  static JsonDecoratedBoxBuilderModel? maybeFromDynamic(
    dynamic map, {
    Map<String, dynamic> args = const {},
    JsonWidgetRegistry? registry,
  }) {
    JsonDecoratedBoxBuilderModel? result;

    if (map != null) {
      if (map is String) {
        map = yaon.parse(map, normalize: true);
      }

      if (map is JsonDecoratedBoxBuilderModel) {
        result = map;
      } else {
        registry ??= JsonWidgetRegistry.instance;
        map = registry.processArgs(map, <String>{}).value;
        result = JsonDecoratedBoxBuilderModel(
          args,
          decoration: map['decoration'],
          position: map['position'],
          child: () {
            dynamic parsed = JsonWidgetData.maybeFromDynamic(
              map['child'],
              registry: registry,
            );

            return parsed;
          }(),
        );
      }
    }

    return result;
  }

  @override
  Map<String, dynamic> toJson() {
    return JsonClass.removeNull({
      'decoration': decoration,
      'position':
          DecorationPosition.background == position
              ? null
              : ThemeEncoder.encodeDecorationPosition(position),
      'child': child?.toJson(),

      ...args,
    });
  }
}

class DecoratedBoxSchema {
  static const id =
      'https://peiffer-innovations.github.io/flutter_json_schemas/schemas/json_dynamic_widget/decorated_box.json';

  static final schema = <String, Object>{
    r'$schema': 'http://json-schema.org/draft-07/schema#',
    r'$id': id,
    'title': 'DecoratedBox',
    'type': 'object',
    'additionalProperties': false,
    'properties': {
      'decoration': SchemaHelper.anySchema,
      'position': SchemaHelper.objectSchema(DecorationPositionSchema.id),
      'child': SchemaHelper.objectSchema(JsonWidgetDataSchema.id),
    },
    'required': ['decoration'],
  };
}
